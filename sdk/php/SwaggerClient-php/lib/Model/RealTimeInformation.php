<?php
/**
 * RealTimeInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RTPI REST Web Services API
 *
 * <p>RTPI REST Web Services API (<a href=\"https://goo.gl/s6NTJe\">RRWS API</a>) provides REST interface to retrieve information on real time bus information, timetables and bus stops. </p> <p>Each method available in RRWS API will be invoked using plain HTTP Request (GET method). Depending on parameters provided, result will be returned either in XML or JSON format (if format is not provided then JSON is used by default). Response will contain requested information (see method specification for details) and error status of the request.</p>  <h2>Error Codes</h2> <table> <tr><th>Error Code</th><th>Description</th></tr> <tr><td>0</td><td>Success</td></tr> <tr><td>1</td><td>No Results</td></tr> <tr><td>2</td><td>Missing Parameter</td></tr> <tr><td>3</td><td>Invalid Parameter</td></tr> <tr><td>4</td><td>Sceduled Downtime</td></tr> <tr><td>5</td><td>Unexpected System Error</td></tr> </table> <p>Error code is included in response for each message. For some error codes additional details will be provided in free text format (Error Message field).</p>
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * RealTimeInformation Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RealTimeInformation implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RealTimeInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'arrivaldatetime' => 'string',
        'duetime' => 'string',
        'departuredatetime' => 'string',
        'departureduetime' => 'string',
        'scheduledarrivaldatetime' => 'string',
        'scheduleddeparturedatetime' => 'string',
        'destination' => 'string',
        'destinationlocalized' => 'string',
        'origin' => 'string',
        'originlocalized' => 'string',
        'direction' => 'string',
        'operator' => 'string',
        'additionalinformation' => 'string',
        'lowfloorstatus' => 'string',
        'route' => 'string',
        'sourcetimestamp' => 'string',
        'monitored' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'arrivaldatetime' => 'arrivaldatetime',
        'duetime' => 'duetime',
        'departuredatetime' => 'departuredatetime',
        'departureduetime' => 'departureduetime',
        'scheduledarrivaldatetime' => 'scheduledarrivaldatetime',
        'scheduleddeparturedatetime' => 'scheduleddeparturedatetime',
        'destination' => 'destination',
        'destinationlocalized' => 'destinationlocalized',
        'origin' => 'origin',
        'originlocalized' => 'originlocalized',
        'direction' => 'direction',
        'operator' => 'operator',
        'additionalinformation' => 'additionalinformation',
        'lowfloorstatus' => 'lowfloorstatus',
        'route' => 'route',
        'sourcetimestamp' => 'sourcetimestamp',
        'monitored' => 'monitored'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'arrivaldatetime' => 'setArrivaldatetime',
        'duetime' => 'setDuetime',
        'departuredatetime' => 'setDeparturedatetime',
        'departureduetime' => 'setDepartureduetime',
        'scheduledarrivaldatetime' => 'setScheduledarrivaldatetime',
        'scheduleddeparturedatetime' => 'setScheduleddeparturedatetime',
        'destination' => 'setDestination',
        'destinationlocalized' => 'setDestinationlocalized',
        'origin' => 'setOrigin',
        'originlocalized' => 'setOriginlocalized',
        'direction' => 'setDirection',
        'operator' => 'setOperator',
        'additionalinformation' => 'setAdditionalinformation',
        'lowfloorstatus' => 'setLowfloorstatus',
        'route' => 'setRoute',
        'sourcetimestamp' => 'setSourcetimestamp',
        'monitored' => 'setMonitored'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'arrivaldatetime' => 'getArrivaldatetime',
        'duetime' => 'getDuetime',
        'departuredatetime' => 'getDeparturedatetime',
        'departureduetime' => 'getDepartureduetime',
        'scheduledarrivaldatetime' => 'getScheduledarrivaldatetime',
        'scheduleddeparturedatetime' => 'getScheduleddeparturedatetime',
        'destination' => 'getDestination',
        'destinationlocalized' => 'getDestinationlocalized',
        'origin' => 'getOrigin',
        'originlocalized' => 'getOriginlocalized',
        'direction' => 'getDirection',
        'operator' => 'getOperator',
        'additionalinformation' => 'getAdditionalinformation',
        'lowfloorstatus' => 'getLowfloorstatus',
        'route' => 'getRoute',
        'sourcetimestamp' => 'getSourcetimestamp',
        'monitored' => 'getMonitored'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['arrivaldatetime'] = isset($data['arrivaldatetime']) ? $data['arrivaldatetime'] : null;
        $this->container['duetime'] = isset($data['duetime']) ? $data['duetime'] : null;
        $this->container['departuredatetime'] = isset($data['departuredatetime']) ? $data['departuredatetime'] : null;
        $this->container['departureduetime'] = isset($data['departureduetime']) ? $data['departureduetime'] : null;
        $this->container['scheduledarrivaldatetime'] = isset($data['scheduledarrivaldatetime']) ? $data['scheduledarrivaldatetime'] : null;
        $this->container['scheduleddeparturedatetime'] = isset($data['scheduleddeparturedatetime']) ? $data['scheduleddeparturedatetime'] : null;
        $this->container['destination'] = isset($data['destination']) ? $data['destination'] : null;
        $this->container['destinationlocalized'] = isset($data['destinationlocalized']) ? $data['destinationlocalized'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['originlocalized'] = isset($data['originlocalized']) ? $data['originlocalized'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['additionalinformation'] = isset($data['additionalinformation']) ? $data['additionalinformation'] : null;
        $this->container['lowfloorstatus'] = isset($data['lowfloorstatus']) ? $data['lowfloorstatus'] : null;
        $this->container['route'] = isset($data['route']) ? $data['route'] : null;
        $this->container['sourcetimestamp'] = isset($data['sourcetimestamp']) ? $data['sourcetimestamp'] : null;
        $this->container['monitored'] = isset($data['monitored']) ? $data['monitored'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets arrivaldatetime
     * @return string
     */
    public function getArrivaldatetime()
    {
        return $this->container['arrivaldatetime'];
    }

    /**
     * Sets arrivaldatetime
     * @param string $arrivaldatetime
     * @return $this
     */
    public function setArrivaldatetime($arrivaldatetime)
    {
        $this->container['arrivaldatetime'] = $arrivaldatetime;

        return $this;
    }

    /**
     * Gets duetime
     * @return string
     */
    public function getDuetime()
    {
        return $this->container['duetime'];
    }

    /**
     * Sets duetime
     * @param string $duetime
     * @return $this
     */
    public function setDuetime($duetime)
    {
        $this->container['duetime'] = $duetime;

        return $this;
    }

    /**
     * Gets departuredatetime
     * @return string
     */
    public function getDeparturedatetime()
    {
        return $this->container['departuredatetime'];
    }

    /**
     * Sets departuredatetime
     * @param string $departuredatetime
     * @return $this
     */
    public function setDeparturedatetime($departuredatetime)
    {
        $this->container['departuredatetime'] = $departuredatetime;

        return $this;
    }

    /**
     * Gets departureduetime
     * @return string
     */
    public function getDepartureduetime()
    {
        return $this->container['departureduetime'];
    }

    /**
     * Sets departureduetime
     * @param string $departureduetime
     * @return $this
     */
    public function setDepartureduetime($departureduetime)
    {
        $this->container['departureduetime'] = $departureduetime;

        return $this;
    }

    /**
     * Gets scheduledarrivaldatetime
     * @return string
     */
    public function getScheduledarrivaldatetime()
    {
        return $this->container['scheduledarrivaldatetime'];
    }

    /**
     * Sets scheduledarrivaldatetime
     * @param string $scheduledarrivaldatetime
     * @return $this
     */
    public function setScheduledarrivaldatetime($scheduledarrivaldatetime)
    {
        $this->container['scheduledarrivaldatetime'] = $scheduledarrivaldatetime;

        return $this;
    }

    /**
     * Gets scheduleddeparturedatetime
     * @return string
     */
    public function getScheduleddeparturedatetime()
    {
        return $this->container['scheduleddeparturedatetime'];
    }

    /**
     * Sets scheduleddeparturedatetime
     * @param string $scheduleddeparturedatetime
     * @return $this
     */
    public function setScheduleddeparturedatetime($scheduleddeparturedatetime)
    {
        $this->container['scheduleddeparturedatetime'] = $scheduleddeparturedatetime;

        return $this;
    }

    /**
     * Gets destination
     * @return string
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     * @param string $destination
     * @return $this
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets destinationlocalized
     * @return string
     */
    public function getDestinationlocalized()
    {
        return $this->container['destinationlocalized'];
    }

    /**
     * Sets destinationlocalized
     * @param string $destinationlocalized
     * @return $this
     */
    public function setDestinationlocalized($destinationlocalized)
    {
        $this->container['destinationlocalized'] = $destinationlocalized;

        return $this;
    }

    /**
     * Gets origin
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     * @param string $origin
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets originlocalized
     * @return string
     */
    public function getOriginlocalized()
    {
        return $this->container['originlocalized'];
    }

    /**
     * Sets originlocalized
     * @param string $originlocalized
     * @return $this
     */
    public function setOriginlocalized($originlocalized)
    {
        $this->container['originlocalized'] = $originlocalized;

        return $this;
    }

    /**
     * Gets direction
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     * @param string $direction
     * @return $this
     */
    public function setDirection($direction)
    {
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets operator
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     * @param string $operator
     * @return $this
     */
    public function setOperator($operator)
    {
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets additionalinformation
     * @return string
     */
    public function getAdditionalinformation()
    {
        return $this->container['additionalinformation'];
    }

    /**
     * Sets additionalinformation
     * @param string $additionalinformation
     * @return $this
     */
    public function setAdditionalinformation($additionalinformation)
    {
        $this->container['additionalinformation'] = $additionalinformation;

        return $this;
    }

    /**
     * Gets lowfloorstatus
     * @return string
     */
    public function getLowfloorstatus()
    {
        return $this->container['lowfloorstatus'];
    }

    /**
     * Sets lowfloorstatus
     * @param string $lowfloorstatus
     * @return $this
     */
    public function setLowfloorstatus($lowfloorstatus)
    {
        $this->container['lowfloorstatus'] = $lowfloorstatus;

        return $this;
    }

    /**
     * Gets route
     * @return string
     */
    public function getRoute()
    {
        return $this->container['route'];
    }

    /**
     * Sets route
     * @param string $route
     * @return $this
     */
    public function setRoute($route)
    {
        $this->container['route'] = $route;

        return $this;
    }

    /**
     * Gets sourcetimestamp
     * @return string
     */
    public function getSourcetimestamp()
    {
        return $this->container['sourcetimestamp'];
    }

    /**
     * Sets sourcetimestamp
     * @param string $sourcetimestamp
     * @return $this
     */
    public function setSourcetimestamp($sourcetimestamp)
    {
        $this->container['sourcetimestamp'] = $sourcetimestamp;

        return $this;
    }

    /**
     * Gets monitored
     * @return string
     */
    public function getMonitored()
    {
        return $this->container['monitored'];
    }

    /**
     * Sets monitored
     * @param string $monitored
     * @return $this
     */
    public function setMonitored($monitored)
    {
        $this->container['monitored'] = $monitored;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


