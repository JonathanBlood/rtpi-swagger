/**
 * RTPI REST Web Services API
 * <p>RTPI REST Web Services API (<a href=\"https://goo.gl/s6NTJe\">RRWS API</a>) provides REST interface to retrieve information on real time bus information, timetables and bus stops. </p> <p>Each method available in RRWS API will be invoked using plain HTTP Request (GET method). Depending on parameters provided, result will be returned either in XML or JSON format (if format is not provided then JSON is used by default). Response will contain requested information (see method specification for details) and error status of the request.</p>  <h2>Error Codes</h2> <table> <tr><th>Error Code</th><th>Description</th></tr> <tr><td>0</td><td>Success</td></tr> <tr><td>1</td><td>No Results</td></tr> <tr><td>2</td><td>Missing Parameter</td></tr> <tr><td>3</td><td>Invalid Parameter</td></tr> <tr><td>4</td><td>Sceduled Downtime</td></tr> <tr><td>5</td><td>Unexpected System Error</td></tr> </table> <p>Error code is included in response for each message. For some error codes additional details will be provided in free text format (Error Message field).</p> 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import request = require('request');
import http = require('http');
import Promise = require('bluebird');

let defaultBasePath = 'https://data.dublinked.ie/cgi-bin/rtpi/';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

export class BusStopList {
    'errorcode': string;
    'errormessage': string;
    'numberofresults': number;
    'timestamp': string;
    'results': Array<Stop>;
}

export class Operator {
    'operatorreference': string;
    'operatorname': string;
    'operatordescription': string;
}

export class OperatorList {
    'errorcode': string;
    'errormessage': string;
    'numberofresults': number;
    'timestamp': string;
    'results': Array<Operator>;
}

export class RealTimeInformation {
    'arrivaldatetime': string;
    'duetime': string;
    'departuredatetime': string;
    'departureduetime': string;
    'scheduledarrivaldatetime': string;
    'scheduleddeparturedatetime': string;
    'destination': string;
    'destinationlocalized': string;
    'origin': string;
    'originlocalized': string;
    'direction': string;
    'operator': string;
    'additionalinformation': string;
    'lowfloorstatus': string;
    'route': string;
    'sourcetimestamp': string;
    'monitored': string;
}

export class RealTimeInformationList {
    'errorcode': string;
    'errormessage': string;
    'numberofresults': number;
    'stopid': string;
    'timestamp': string;
    'results': Array<RealTimeInformation>;
}

export class Route {
    'operator': string;
    'route': string;
}

export class RouteDetail {
    'operator': string;
    'origin': string;
    'originlocalized': string;
    'destination': string;
    'destinationlocalized': string;
    'lastupdated': string;
    'stops': Array<Stop>;
}

export class RouteDetailList {
    'errorcode': string;
    'errormessage': string;
    'numberofresults': number;
    'route': string;
    'timestamp': string;
    'results': Array<RouteDetail>;
}

export class RouteList {
    'errorcode': string;
    'errormessage': string;
    'numberofresults': number;
    'timestamp': string;
    'results': Array<Route>;
}

export class RouteOperator {
    'name': string;
    'routes': Array<string>;
}

export class Stop {
    'stopid': string;
    'displaystopid': string;
    'shortname': string;
    'shortnamelocalized': string;
    'fullname': string;
    'fullnamelocalized': string;
    'latitude': string;
    'longitude': string;
    'operators': Array<RouteOperator>;
}

export class Timetable {
    'startdayofweek': string;
    'enddayofweek': string;
    'destination': string;
    'destinationlocalized': string;
    'lastupdated': string;
    'departures': Array<string>;
}

export class TimetableList {
    'errorcode': string;
    'errormessage': string;
    'numberofresults': number;
    'route': string;
    'stopid': string;
    'timestamp': string;
    'results': Array<Timetable>;
}


export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: request.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: request.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header") {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string;

    applyToRequest(requestOptions: request.Options): void {
        requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
    }
}

export class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        // Do nothing
    }
}

export enum BusStopInformationApiApiKeys {
}

export class BusStopInformationApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: BusStopInformationApiApiKeys, value: string) {
        this.authentications[BusStopInformationApiApiKeys[key]].apiKey = value;
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Endpoint to retrieve bus stop information
     * 
     * @param format If not provided JSON format will be used by default
     * @param operator If provided retrieves routes for the given operator
     * @param stopid The bus stop id, if not provided all bus stops are returned
     * @param stopname The stop name, only matching stops are returned
     */
    public getBusStops (format?: string, operator?: string, stopid?: string, stopname?: string) : Promise<{ response: http.ClientResponse; body: BusStopList;  }> {
        const localVarPath = this.basePath + '/busstopinformation';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        if (operator !== undefined) {
            queryParameters['operator'] = operator;
        }

        if (stopid !== undefined) {
            queryParameters['stopid'] = stopid;
        }

        if (stopname !== undefined) {
            queryParameters['stopname'] = stopname;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: BusStopList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum OperatorInformationApiApiKeys {
}

export class OperatorInformationApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: OperatorInformationApiApiKeys, value: string) {
        this.authentications[OperatorInformationApiApiKeys[key]].apiKey = value;
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Endpoint to retrieve information about route operators in the system
     * 
     * @param format If not provided JSON format will be used by default
     */
    public getOperators (format?: string) : Promise<{ response: http.ClientResponse; body: OperatorList;  }> {
        const localVarPath = this.basePath + '/operatorinformation';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: OperatorList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum RealTimeBusInformationApiApiKeys {
}

export class RealTimeBusInformationApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: RealTimeBusInformationApiApiKeys, value: string) {
        this.authentications[RealTimeBusInformationApiApiKeys[key]].apiKey = value;
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Endpoint to retrieve real time bus information
     * 
     * @param stopid The bus stop id
     * @param format If not provided JSON format will be used by default
     * @param operator If provided retrieves routes for the given operator
     * @param routeid The route identifier
     * @param maxresults The maximum number of results, if not provided system will limit the number of results depending on server configuration
     */
    public getRealTimeBusInformation (stopid: string, format?: string, operator?: string, routeid?: string, maxresults?: string) : Promise<{ response: http.ClientResponse; body: RealTimeInformationList;  }> {
        const localVarPath = this.basePath + '/realtimebusinformation';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'stopid' is not null or undefined
        if (stopid === null || stopid === undefined) {
            throw new Error('Required parameter stopid was null or undefined when calling getRealTimeBusInformation.');
        }

        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        if (operator !== undefined) {
            queryParameters['operator'] = operator;
        }

        if (stopid !== undefined) {
            queryParameters['stopid'] = stopid;
        }

        if (routeid !== undefined) {
            queryParameters['routeid'] = routeid;
        }

        if (maxresults !== undefined) {
            queryParameters['maxresults'] = maxresults;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: RealTimeInformationList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum RouteDetailInformationApiApiKeys {
}

export class RouteDetailInformationApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: RouteDetailInformationApiApiKeys, value: string) {
        this.authentications[RouteDetailInformationApiApiKeys[key]].apiKey = value;
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Endpoint to retrieve route detail information
     * 
     * @param operator The requested operator id
     * @param routeid The requested route id
     * @param format If not provided JSON format will be used by default
     */
    public getRouteDetail (operator: string, routeid: string, format?: string) : Promise<{ response: http.ClientResponse; body: RouteDetailList;  }> {
        const localVarPath = this.basePath + '/routeinformation';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'operator' is not null or undefined
        if (operator === null || operator === undefined) {
            throw new Error('Required parameter operator was null or undefined when calling getRouteDetail.');
        }

        // verify required parameter 'routeid' is not null or undefined
        if (routeid === null || routeid === undefined) {
            throw new Error('Required parameter routeid was null or undefined when calling getRouteDetail.');
        }

        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        if (operator !== undefined) {
            queryParameters['operator'] = operator;
        }

        if (routeid !== undefined) {
            queryParameters['routeid'] = routeid;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: RouteDetailList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum RouteInformationApiApiKeys {
}

export class RouteInformationApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: RouteInformationApiApiKeys, value: string) {
        this.authentications[RouteInformationApiApiKeys[key]].apiKey = value;
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Endpoint to retrieve list of routes
     * 
     * @param format If not provided JSON format will be used by default
     * @param operator If provided retrieves routes for the given operator
     */
    public getRoutes (format?: string, operator?: string) : Promise<{ response: http.ClientResponse; body: RouteList;  }> {
        const localVarPath = this.basePath + '/routelistinformation';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        if (operator !== undefined) {
            queryParameters['operator'] = operator;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: RouteList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum TimetableInformationApiApiKeys {
}

export class TimetableInformationApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: TimetableInformationApiApiKeys, value: string) {
        this.authentications[TimetableInformationApiApiKeys[key]].apiKey = value;
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * Endpoint to retrieve timetable information
     * 
     * @param type value: week; Time table information is retrieved for the whole week
     * @param stopid The bus stop id, if not provided all bus stops are returned
     * @param routeid The route identifier
     * @param format If not provided JSON format will be used by default
     */
    public getTimeTable (type: string, stopid: string, routeid: string, format?: string) : Promise<{ response: http.ClientResponse; body: TimetableList;  }> {
        const localVarPath = this.basePath + '/timetableinformation';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getTimeTable.');
        }

        // verify required parameter 'stopid' is not null or undefined
        if (stopid === null || stopid === undefined) {
            throw new Error('Required parameter stopid was null or undefined when calling getTimeTable.');
        }

        // verify required parameter 'routeid' is not null or undefined
        if (routeid === null || routeid === undefined) {
            throw new Error('Required parameter routeid was null or undefined when calling getTimeTable.');
        }

        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        if (type !== undefined) {
            queryParameters['type'] = type;
        }

        if (stopid !== undefined) {
            queryParameters['stopid'] = stopid;
        }

        if (routeid !== undefined) {
            queryParameters['routeid'] = routeid;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: TimetableList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
