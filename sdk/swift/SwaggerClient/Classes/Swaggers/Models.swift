// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [BusStopList]
            Decoders.addDecoder(clazz: [BusStopList].self) { (source: AnyObject) -> [BusStopList] in
                return Decoders.decode(clazz: [BusStopList].self, source: source)
            }
            // Decoder for BusStopList
            Decoders.addDecoder(clazz: BusStopList.self) { (source: AnyObject) -> BusStopList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BusStopList()
                instance.errorcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorcode"])
                instance.errormessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errormessage"])
                instance.numberofresults = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberofresults"])
                instance.timestamp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timestamp"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [Operator]
            Decoders.addDecoder(clazz: [Operator].self) { (source: AnyObject) -> [Operator] in
                return Decoders.decode(clazz: [Operator].self, source: source)
            }
            // Decoder for Operator
            Decoders.addDecoder(clazz: Operator.self) { (source: AnyObject) -> Operator in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Operator()
                instance.operatorreference = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operatorreference"])
                instance.operatorname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operatorname"])
                instance.operatordescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operatordescription"])
                return instance
            }


            // Decoder for [OperatorList]
            Decoders.addDecoder(clazz: [OperatorList].self) { (source: AnyObject) -> [OperatorList] in
                return Decoders.decode(clazz: [OperatorList].self, source: source)
            }
            // Decoder for OperatorList
            Decoders.addDecoder(clazz: OperatorList.self) { (source: AnyObject) -> OperatorList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OperatorList()
                instance.errorcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorcode"])
                instance.errormessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errormessage"])
                instance.numberofresults = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberofresults"])
                instance.timestamp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timestamp"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [RealTimeInformation]
            Decoders.addDecoder(clazz: [RealTimeInformation].self) { (source: AnyObject) -> [RealTimeInformation] in
                return Decoders.decode(clazz: [RealTimeInformation].self, source: source)
            }
            // Decoder for RealTimeInformation
            Decoders.addDecoder(clazz: RealTimeInformation.self) { (source: AnyObject) -> RealTimeInformation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RealTimeInformation()
                instance.arrivaldatetime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["arrivaldatetime"])
                instance.duetime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["duetime"])
                instance.departuredatetime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departuredatetime"])
                instance.departureduetime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departureduetime"])
                instance.scheduledarrivaldatetime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scheduledarrivaldatetime"])
                instance.scheduleddeparturedatetime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scheduleddeparturedatetime"])
                instance.destination = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destination"])
                instance.destinationlocalized = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destinationlocalized"])
                instance.origin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["origin"])
                instance.originlocalized = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["originlocalized"])
                instance.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"])
                instance._operator = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operator"])
                instance.additionalinformation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalinformation"])
                instance.lowfloorstatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lowfloorstatus"])
                instance.route = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["route"])
                instance.sourcetimestamp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sourcetimestamp"])
                instance.monitored = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["monitored"])
                return instance
            }


            // Decoder for [RealTimeInformationList]
            Decoders.addDecoder(clazz: [RealTimeInformationList].self) { (source: AnyObject) -> [RealTimeInformationList] in
                return Decoders.decode(clazz: [RealTimeInformationList].self, source: source)
            }
            // Decoder for RealTimeInformationList
            Decoders.addDecoder(clazz: RealTimeInformationList.self) { (source: AnyObject) -> RealTimeInformationList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RealTimeInformationList()
                instance.errorcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorcode"])
                instance.errormessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errormessage"])
                instance.numberofresults = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberofresults"])
                instance.stopid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stopid"])
                instance.timestamp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timestamp"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [Route]
            Decoders.addDecoder(clazz: [Route].self) { (source: AnyObject) -> [Route] in
                return Decoders.decode(clazz: [Route].self, source: source)
            }
            // Decoder for Route
            Decoders.addDecoder(clazz: Route.self) { (source: AnyObject) -> Route in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Route()
                instance._operator = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operator"])
                instance.route = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["route"])
                return instance
            }


            // Decoder for [RouteDetail]
            Decoders.addDecoder(clazz: [RouteDetail].self) { (source: AnyObject) -> [RouteDetail] in
                return Decoders.decode(clazz: [RouteDetail].self, source: source)
            }
            // Decoder for RouteDetail
            Decoders.addDecoder(clazz: RouteDetail.self) { (source: AnyObject) -> RouteDetail in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RouteDetail()
                instance._operator = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operator"])
                instance.origin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["origin"])
                instance.originlocalized = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["originlocalized"])
                instance.destination = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destination"])
                instance.destinationlocalized = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destinationlocalized"])
                instance.lastupdated = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastupdated"])
                instance.stops = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["stops"])
                return instance
            }


            // Decoder for [RouteDetailList]
            Decoders.addDecoder(clazz: [RouteDetailList].self) { (source: AnyObject) -> [RouteDetailList] in
                return Decoders.decode(clazz: [RouteDetailList].self, source: source)
            }
            // Decoder for RouteDetailList
            Decoders.addDecoder(clazz: RouteDetailList.self) { (source: AnyObject) -> RouteDetailList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RouteDetailList()
                instance.errorcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorcode"])
                instance.errormessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errormessage"])
                instance.numberofresults = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberofresults"])
                instance.route = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["route"])
                instance.timestamp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timestamp"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [RouteList]
            Decoders.addDecoder(clazz: [RouteList].self) { (source: AnyObject) -> [RouteList] in
                return Decoders.decode(clazz: [RouteList].self, source: source)
            }
            // Decoder for RouteList
            Decoders.addDecoder(clazz: RouteList.self) { (source: AnyObject) -> RouteList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RouteList()
                instance.errorcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorcode"])
                instance.errormessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errormessage"])
                instance.numberofresults = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberofresults"])
                instance.timestamp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timestamp"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [RouteOperator]
            Decoders.addDecoder(clazz: [RouteOperator].self) { (source: AnyObject) -> [RouteOperator] in
                return Decoders.decode(clazz: [RouteOperator].self, source: source)
            }
            // Decoder for RouteOperator
            Decoders.addDecoder(clazz: RouteOperator.self) { (source: AnyObject) -> RouteOperator in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RouteOperator()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.routes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["routes"])
                return instance
            }


            // Decoder for [Stop]
            Decoders.addDecoder(clazz: [Stop].self) { (source: AnyObject) -> [Stop] in
                return Decoders.decode(clazz: [Stop].self, source: source)
            }
            // Decoder for Stop
            Decoders.addDecoder(clazz: Stop.self) { (source: AnyObject) -> Stop in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Stop()
                instance.stopid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stopid"])
                instance.displaystopid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displaystopid"])
                instance.shortname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shortname"])
                instance.shortnamelocalized = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shortnamelocalized"])
                instance.fullname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullname"])
                instance.fullnamelocalized = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullnamelocalized"])
                instance.latitude = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["longitude"])
                instance.operators = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["operators"])
                return instance
            }


            // Decoder for [Timetable]
            Decoders.addDecoder(clazz: [Timetable].self) { (source: AnyObject) -> [Timetable] in
                return Decoders.decode(clazz: [Timetable].self, source: source)
            }
            // Decoder for Timetable
            Decoders.addDecoder(clazz: Timetable.self) { (source: AnyObject) -> Timetable in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Timetable()
                instance.startdayofweek = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startdayofweek"])
                instance.enddayofweek = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enddayofweek"])
                instance.destination = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destination"])
                instance.destinationlocalized = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destinationlocalized"])
                instance.lastupdated = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastupdated"])
                instance.departures = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["departures"])
                return instance
            }


            // Decoder for [TimetableList]
            Decoders.addDecoder(clazz: [TimetableList].self) { (source: AnyObject) -> [TimetableList] in
                return Decoders.decode(clazz: [TimetableList].self, source: source)
            }
            // Decoder for TimetableList
            Decoders.addDecoder(clazz: TimetableList.self) { (source: AnyObject) -> TimetableList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TimetableList()
                instance.errorcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorcode"])
                instance.errormessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errormessage"])
                instance.numberofresults = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberofresults"])
                instance.route = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["route"])
                instance.stopid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stopid"])
                instance.timestamp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timestamp"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }
        }
    }
}
