/**
 * RTPI REST Web Services API
 * <p>RTPI REST Web Services API (<a href=\"https://goo.gl/s6NTJe\">RRWS API</a>) provides REST interface to retrieve information on real time bus information, timetables and bus stops. </p> <p>Each method available in RRWS API will be invoked using plain HTTP Request (GET method). Depending on parameters provided, result will be returned either in XML or JSON format (if format is not provided then JSON is used by default). Response will contain requested information (see method specification for details) and error status of the request.</p>  <h2>Error Codes</h2> <table> <tr><th>Error Code</th><th>Description</th></tr> <tr><td>0</td><td>Success</td></tr> <tr><td>1</td><td>No Results</td></tr> <tr><td>2</td><td>Missing Parameter</td></tr> <tr><td>3</td><td>Invalid Parameter</td></tr> <tr><td>4</td><td>Sceduled Downtime</td></tr> <tr><td>5</td><td>Unexpected System Error</td></tr> </table> <p>Error code is included in response for each message. For some error codes additional details will be provided in free text format (Error Message field).</p> 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.RealTimeInformationList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RealTimeBusInformationApi {
    private ApiClient apiClient;

    public RealTimeBusInformationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RealTimeBusInformationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getRealTimeBusInformation */
    private com.squareup.okhttp.Call getRealTimeBusInformationCall(String stopid, String format, String operator, String routeid, String maxresults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'stopid' is set
        if (stopid == null) {
            throw new ApiException("Missing the required parameter 'stopid' when calling getRealTimeBusInformation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/realtimebusinformation".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (operator != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "operator", operator));
        if (stopid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "stopid", stopid));
        if (routeid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "routeid", routeid));
        if (maxresults != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxresults", maxresults));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Endpoint to retrieve real time bus information
     * 
     * @param stopid The bus stop id (required)
     * @param format If not provided JSON format will be used by default (optional)
     * @param operator If provided retrieves routes for the given operator (optional)
     * @param routeid The route identifier (optional)
     * @param maxresults The maximum number of results, if not provided system will limit the number of results depending on server configuration (optional)
     * @return RealTimeInformationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RealTimeInformationList getRealTimeBusInformation(String stopid, String format, String operator, String routeid, String maxresults) throws ApiException {
        ApiResponse<RealTimeInformationList> resp = getRealTimeBusInformationWithHttpInfo(stopid, format, operator, routeid, maxresults);
        return resp.getData();
    }

    /**
     * Endpoint to retrieve real time bus information
     * 
     * @param stopid The bus stop id (required)
     * @param format If not provided JSON format will be used by default (optional)
     * @param operator If provided retrieves routes for the given operator (optional)
     * @param routeid The route identifier (optional)
     * @param maxresults The maximum number of results, if not provided system will limit the number of results depending on server configuration (optional)
     * @return ApiResponse&lt;RealTimeInformationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RealTimeInformationList> getRealTimeBusInformationWithHttpInfo(String stopid, String format, String operator, String routeid, String maxresults) throws ApiException {
        com.squareup.okhttp.Call call = getRealTimeBusInformationCall(stopid, format, operator, routeid, maxresults, null, null);
        Type localVarReturnType = new TypeToken<RealTimeInformationList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Endpoint to retrieve real time bus information (asynchronously)
     * 
     * @param stopid The bus stop id (required)
     * @param format If not provided JSON format will be used by default (optional)
     * @param operator If provided retrieves routes for the given operator (optional)
     * @param routeid The route identifier (optional)
     * @param maxresults The maximum number of results, if not provided system will limit the number of results depending on server configuration (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRealTimeBusInformationAsync(String stopid, String format, String operator, String routeid, String maxresults, final ApiCallback<RealTimeInformationList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRealTimeBusInformationCall(stopid, format, operator, routeid, maxresults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RealTimeInformationList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
