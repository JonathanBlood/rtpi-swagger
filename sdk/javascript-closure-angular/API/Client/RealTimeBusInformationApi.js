/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.RealTimeBusInformationApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * &lt;p&gt;RTPI REST Web Services API (&lt;a href&#x3D;\&quot;https://goo.gl/s6NTJe\&quot;&gt;RRWS API&lt;/a&gt;) provides REST interface to retrieve information on real time bus information, timetables and bus stops. &lt;/p&gt; &lt;p&gt;Each method available in RRWS API will be invoked using plain HTTP Request (GET method). Depending on parameters provided, result will be returned either in XML or JSON format (if format is not provided then JSON is used by default). Response will contain requested information (see method specification for details) and error status of the request.&lt;/p&gt;  &lt;h2&gt;Error Codes&lt;/h2&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Error Code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Success&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;No Results&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Missing Parameter&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Invalid Parameter&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Sceduled Downtime&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Unexpected System Error&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;p&gt;Error code is included in response for each message. For some error codes additional details will be provided in free text format (Error Message field).&lt;/p&gt; 
 * Version: 1.0.0
 * Generated at: 2017-06-17T16:51:06.863+01:00
 * Generated by: class io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.RealTimeBusInformationApi');

goog.require('API.Client.RealTimeInformationList');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.RealTimeBusInformationApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('RealTimeBusInformationApiBasePath') ?
                   /** @type {!string} */ ($injector.get('RealTimeBusInformationApiBasePath')) :
                   'https://data.dublinked.ie/cgi-bin/rtpi/';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('RealTimeBusInformationApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('RealTimeBusInformationApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.RealTimeBusInformationApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Endpoint to retrieve real time bus information
 * 
 * @param {!string} stopid The bus stop id
 * @param {!string=} opt_format If not provided JSON format will be used by default
 * @param {!string=} opt_operator If provided retrieves routes for the given operator
 * @param {!string=} opt_routeid The route identifier
 * @param {!string=} opt_maxresults The maximum number of results, if not provided system will limit the number of results depending on server configuration
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.RealTimeInformationList>}
 */
API.Client.RealTimeBusInformationApi.prototype.getRealTimeBusInformation = function(stopid, opt_format, opt_operator, opt_routeid, opt_maxresults, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/realtimebusinformation';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'stopid' is set
  if (!stopid) {
    throw new Error('Missing required parameter stopid when calling getRealTimeBusInformation');
  }
  if (opt_format !== undefined) {
    queryParameters['format'] = opt_format;
  }

  if (opt_operator !== undefined) {
    queryParameters['operator'] = opt_operator;
  }

  if (stopid !== undefined) {
    queryParameters['stopid'] = stopid;
  }

  if (opt_routeid !== undefined) {
    queryParameters['routeid'] = opt_routeid;
  }

  if (opt_maxresults !== undefined) {
    queryParameters['maxresults'] = opt_maxresults;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
