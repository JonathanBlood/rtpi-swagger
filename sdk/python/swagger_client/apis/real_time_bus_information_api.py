# coding: utf-8

"""
    RTPI REST Web Services API

    <p>RTPI REST Web Services API (<a href=\"https://goo.gl/s6NTJe\">RRWS API</a>) provides REST interface to retrieve information on real time bus information, timetables and bus stops. </p> <p>Each method available in RRWS API will be invoked using plain HTTP Request (GET method). Depending on parameters provided, result will be returned either in XML or JSON format (if format is not provided then JSON is used by default). Response will contain requested information (see method specification for details) and error status of the request.</p>  <h2>Error Codes</h2> <table> <tr><th>Error Code</th><th>Description</th></tr> <tr><td>0</td><td>Success</td></tr> <tr><td>1</td><td>No Results</td></tr> <tr><td>2</td><td>Missing Parameter</td></tr> <tr><td>3</td><td>Invalid Parameter</td></tr> <tr><td>4</td><td>Sceduled Downtime</td></tr> <tr><td>5</td><td>Unexpected System Error</td></tr> </table> <p>Error code is included in response for each message. For some error codes additional details will be provided in free text format (Error Message field).</p> 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class RealTimeBusInformationApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_real_time_bus_information(self, stopid, **kwargs):
        """
        Endpoint to retrieve real time bus information
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_real_time_bus_information(stopid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str stopid: The bus stop id (required)
        :param str format: If not provided JSON format will be used by default
        :param str operator: If provided retrieves routes for the given operator
        :param str routeid: The route identifier
        :param str maxresults: The maximum number of results, if not provided system will limit the number of results depending on server configuration
        :return: RealTimeInformationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_real_time_bus_information_with_http_info(stopid, **kwargs)
        else:
            (data) = self.get_real_time_bus_information_with_http_info(stopid, **kwargs)
            return data

    def get_real_time_bus_information_with_http_info(self, stopid, **kwargs):
        """
        Endpoint to retrieve real time bus information
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_real_time_bus_information_with_http_info(stopid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str stopid: The bus stop id (required)
        :param str format: If not provided JSON format will be used by default
        :param str operator: If provided retrieves routes for the given operator
        :param str routeid: The route identifier
        :param str maxresults: The maximum number of results, if not provided system will limit the number of results depending on server configuration
        :return: RealTimeInformationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stopid', 'format', 'operator', 'routeid', 'maxresults']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_real_time_bus_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stopid' is set
        if ('stopid' not in params) or (params['stopid'] is None):
            raise ValueError("Missing the required parameter `stopid` when calling `get_real_time_bus_information`")

        resource_path = '/realtimebusinformation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'format' in params:
            query_params['format'] = params['format']
        if 'operator' in params:
            query_params['operator'] = params['operator']
        if 'stopid' in params:
            query_params['stopid'] = params['stopid']
        if 'routeid' in params:
            query_params['routeid'] = params['routeid']
        if 'maxresults' in params:
            query_params['maxresults'] = params['maxresults']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RealTimeInformationList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
