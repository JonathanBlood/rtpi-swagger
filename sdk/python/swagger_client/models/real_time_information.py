# coding: utf-8

"""
    RTPI REST Web Services API

    <p>RTPI REST Web Services API (<a href=\"https://goo.gl/s6NTJe\">RRWS API</a>) provides REST interface to retrieve information on real time bus information, timetables and bus stops. </p> <p>Each method available in RRWS API will be invoked using plain HTTP Request (GET method). Depending on parameters provided, result will be returned either in XML or JSON format (if format is not provided then JSON is used by default). Response will contain requested information (see method specification for details) and error status of the request.</p>  <h2>Error Codes</h2> <table> <tr><th>Error Code</th><th>Description</th></tr> <tr><td>0</td><td>Success</td></tr> <tr><td>1</td><td>No Results</td></tr> <tr><td>2</td><td>Missing Parameter</td></tr> <tr><td>3</td><td>Invalid Parameter</td></tr> <tr><td>4</td><td>Sceduled Downtime</td></tr> <tr><td>5</td><td>Unexpected System Error</td></tr> </table> <p>Error code is included in response for each message. For some error codes additional details will be provided in free text format (Error Message field).</p> 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RealTimeInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, arrivaldatetime=None, duetime=None, departuredatetime=None, departureduetime=None, scheduledarrivaldatetime=None, scheduleddeparturedatetime=None, destination=None, destinationlocalized=None, origin=None, originlocalized=None, direction=None, operator=None, additionalinformation=None, lowfloorstatus=None, route=None, sourcetimestamp=None, monitored=None):
        """
        RealTimeInformation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'arrivaldatetime': 'str',
            'duetime': 'str',
            'departuredatetime': 'str',
            'departureduetime': 'str',
            'scheduledarrivaldatetime': 'str',
            'scheduleddeparturedatetime': 'str',
            'destination': 'str',
            'destinationlocalized': 'str',
            'origin': 'str',
            'originlocalized': 'str',
            'direction': 'str',
            'operator': 'str',
            'additionalinformation': 'str',
            'lowfloorstatus': 'str',
            'route': 'str',
            'sourcetimestamp': 'str',
            'monitored': 'str'
        }

        self.attribute_map = {
            'arrivaldatetime': 'arrivaldatetime',
            'duetime': 'duetime',
            'departuredatetime': 'departuredatetime',
            'departureduetime': 'departureduetime',
            'scheduledarrivaldatetime': 'scheduledarrivaldatetime',
            'scheduleddeparturedatetime': 'scheduleddeparturedatetime',
            'destination': 'destination',
            'destinationlocalized': 'destinationlocalized',
            'origin': 'origin',
            'originlocalized': 'originlocalized',
            'direction': 'direction',
            'operator': 'operator',
            'additionalinformation': 'additionalinformation',
            'lowfloorstatus': 'lowfloorstatus',
            'route': 'route',
            'sourcetimestamp': 'sourcetimestamp',
            'monitored': 'monitored'
        }

        self._arrivaldatetime = arrivaldatetime
        self._duetime = duetime
        self._departuredatetime = departuredatetime
        self._departureduetime = departureduetime
        self._scheduledarrivaldatetime = scheduledarrivaldatetime
        self._scheduleddeparturedatetime = scheduleddeparturedatetime
        self._destination = destination
        self._destinationlocalized = destinationlocalized
        self._origin = origin
        self._originlocalized = originlocalized
        self._direction = direction
        self._operator = operator
        self._additionalinformation = additionalinformation
        self._lowfloorstatus = lowfloorstatus
        self._route = route
        self._sourcetimestamp = sourcetimestamp
        self._monitored = monitored

    @property
    def arrivaldatetime(self):
        """
        Gets the arrivaldatetime of this RealTimeInformation.


        :return: The arrivaldatetime of this RealTimeInformation.
        :rtype: str
        """
        return self._arrivaldatetime

    @arrivaldatetime.setter
    def arrivaldatetime(self, arrivaldatetime):
        """
        Sets the arrivaldatetime of this RealTimeInformation.


        :param arrivaldatetime: The arrivaldatetime of this RealTimeInformation.
        :type: str
        """

        self._arrivaldatetime = arrivaldatetime

    @property
    def duetime(self):
        """
        Gets the duetime of this RealTimeInformation.


        :return: The duetime of this RealTimeInformation.
        :rtype: str
        """
        return self._duetime

    @duetime.setter
    def duetime(self, duetime):
        """
        Sets the duetime of this RealTimeInformation.


        :param duetime: The duetime of this RealTimeInformation.
        :type: str
        """

        self._duetime = duetime

    @property
    def departuredatetime(self):
        """
        Gets the departuredatetime of this RealTimeInformation.


        :return: The departuredatetime of this RealTimeInformation.
        :rtype: str
        """
        return self._departuredatetime

    @departuredatetime.setter
    def departuredatetime(self, departuredatetime):
        """
        Sets the departuredatetime of this RealTimeInformation.


        :param departuredatetime: The departuredatetime of this RealTimeInformation.
        :type: str
        """

        self._departuredatetime = departuredatetime

    @property
    def departureduetime(self):
        """
        Gets the departureduetime of this RealTimeInformation.


        :return: The departureduetime of this RealTimeInformation.
        :rtype: str
        """
        return self._departureduetime

    @departureduetime.setter
    def departureduetime(self, departureduetime):
        """
        Sets the departureduetime of this RealTimeInformation.


        :param departureduetime: The departureduetime of this RealTimeInformation.
        :type: str
        """

        self._departureduetime = departureduetime

    @property
    def scheduledarrivaldatetime(self):
        """
        Gets the scheduledarrivaldatetime of this RealTimeInformation.


        :return: The scheduledarrivaldatetime of this RealTimeInformation.
        :rtype: str
        """
        return self._scheduledarrivaldatetime

    @scheduledarrivaldatetime.setter
    def scheduledarrivaldatetime(self, scheduledarrivaldatetime):
        """
        Sets the scheduledarrivaldatetime of this RealTimeInformation.


        :param scheduledarrivaldatetime: The scheduledarrivaldatetime of this RealTimeInformation.
        :type: str
        """

        self._scheduledarrivaldatetime = scheduledarrivaldatetime

    @property
    def scheduleddeparturedatetime(self):
        """
        Gets the scheduleddeparturedatetime of this RealTimeInformation.


        :return: The scheduleddeparturedatetime of this RealTimeInformation.
        :rtype: str
        """
        return self._scheduleddeparturedatetime

    @scheduleddeparturedatetime.setter
    def scheduleddeparturedatetime(self, scheduleddeparturedatetime):
        """
        Sets the scheduleddeparturedatetime of this RealTimeInformation.


        :param scheduleddeparturedatetime: The scheduleddeparturedatetime of this RealTimeInformation.
        :type: str
        """

        self._scheduleddeparturedatetime = scheduleddeparturedatetime

    @property
    def destination(self):
        """
        Gets the destination of this RealTimeInformation.


        :return: The destination of this RealTimeInformation.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """
        Sets the destination of this RealTimeInformation.


        :param destination: The destination of this RealTimeInformation.
        :type: str
        """

        self._destination = destination

    @property
    def destinationlocalized(self):
        """
        Gets the destinationlocalized of this RealTimeInformation.


        :return: The destinationlocalized of this RealTimeInformation.
        :rtype: str
        """
        return self._destinationlocalized

    @destinationlocalized.setter
    def destinationlocalized(self, destinationlocalized):
        """
        Sets the destinationlocalized of this RealTimeInformation.


        :param destinationlocalized: The destinationlocalized of this RealTimeInformation.
        :type: str
        """

        self._destinationlocalized = destinationlocalized

    @property
    def origin(self):
        """
        Gets the origin of this RealTimeInformation.


        :return: The origin of this RealTimeInformation.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """
        Sets the origin of this RealTimeInformation.


        :param origin: The origin of this RealTimeInformation.
        :type: str
        """

        self._origin = origin

    @property
    def originlocalized(self):
        """
        Gets the originlocalized of this RealTimeInformation.


        :return: The originlocalized of this RealTimeInformation.
        :rtype: str
        """
        return self._originlocalized

    @originlocalized.setter
    def originlocalized(self, originlocalized):
        """
        Sets the originlocalized of this RealTimeInformation.


        :param originlocalized: The originlocalized of this RealTimeInformation.
        :type: str
        """

        self._originlocalized = originlocalized

    @property
    def direction(self):
        """
        Gets the direction of this RealTimeInformation.


        :return: The direction of this RealTimeInformation.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this RealTimeInformation.


        :param direction: The direction of this RealTimeInformation.
        :type: str
        """

        self._direction = direction

    @property
    def operator(self):
        """
        Gets the operator of this RealTimeInformation.


        :return: The operator of this RealTimeInformation.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """
        Sets the operator of this RealTimeInformation.


        :param operator: The operator of this RealTimeInformation.
        :type: str
        """

        self._operator = operator

    @property
    def additionalinformation(self):
        """
        Gets the additionalinformation of this RealTimeInformation.


        :return: The additionalinformation of this RealTimeInformation.
        :rtype: str
        """
        return self._additionalinformation

    @additionalinformation.setter
    def additionalinformation(self, additionalinformation):
        """
        Sets the additionalinformation of this RealTimeInformation.


        :param additionalinformation: The additionalinformation of this RealTimeInformation.
        :type: str
        """

        self._additionalinformation = additionalinformation

    @property
    def lowfloorstatus(self):
        """
        Gets the lowfloorstatus of this RealTimeInformation.


        :return: The lowfloorstatus of this RealTimeInformation.
        :rtype: str
        """
        return self._lowfloorstatus

    @lowfloorstatus.setter
    def lowfloorstatus(self, lowfloorstatus):
        """
        Sets the lowfloorstatus of this RealTimeInformation.


        :param lowfloorstatus: The lowfloorstatus of this RealTimeInformation.
        :type: str
        """

        self._lowfloorstatus = lowfloorstatus

    @property
    def route(self):
        """
        Gets the route of this RealTimeInformation.


        :return: The route of this RealTimeInformation.
        :rtype: str
        """
        return self._route

    @route.setter
    def route(self, route):
        """
        Sets the route of this RealTimeInformation.


        :param route: The route of this RealTimeInformation.
        :type: str
        """

        self._route = route

    @property
    def sourcetimestamp(self):
        """
        Gets the sourcetimestamp of this RealTimeInformation.


        :return: The sourcetimestamp of this RealTimeInformation.
        :rtype: str
        """
        return self._sourcetimestamp

    @sourcetimestamp.setter
    def sourcetimestamp(self, sourcetimestamp):
        """
        Sets the sourcetimestamp of this RealTimeInformation.


        :param sourcetimestamp: The sourcetimestamp of this RealTimeInformation.
        :type: str
        """

        self._sourcetimestamp = sourcetimestamp

    @property
    def monitored(self):
        """
        Gets the monitored of this RealTimeInformation.


        :return: The monitored of this RealTimeInformation.
        :rtype: str
        """
        return self._monitored

    @monitored.setter
    def monitored(self, monitored):
        """
        Sets the monitored of this RealTimeInformation.


        :param monitored: The monitored of this RealTimeInformation.
        :type: str
        """

        self._monitored = monitored

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
