# coding: utf-8

"""
    RTPI REST Web Services API

    <p>RTPI REST Web Services API (<a href=\"https://goo.gl/s6NTJe\">RRWS API</a>) provides REST interface to retrieve information on real time bus information, timetables and bus stops. </p> <p>Each method available in RRWS API will be invoked using plain HTTP Request (GET method). Depending on parameters provided, result will be returned either in XML or JSON format (if format is not provided then JSON is used by default). Response will contain requested information (see method specification for details) and error status of the request.</p>  <h2>Error Codes</h2> <table> <tr><th>Error Code</th><th>Description</th></tr> <tr><td>0</td><td>Success</td></tr> <tr><td>1</td><td>No Results</td></tr> <tr><td>2</td><td>Missing Parameter</td></tr> <tr><td>3</td><td>Invalid Parameter</td></tr> <tr><td>4</td><td>Sceduled Downtime</td></tr> <tr><td>5</td><td>Unexpected System Error</td></tr> </table> <p>Error code is included in response for each message. For some error codes additional details will be provided in free text format (Error Message field).</p> 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Operator(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, operatorreference=None, operatorname=None, operatordescription=None):
        """
        Operator - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'operatorreference': 'str',
            'operatorname': 'str',
            'operatordescription': 'str'
        }

        self.attribute_map = {
            'operatorreference': 'operatorreference',
            'operatorname': 'operatorname',
            'operatordescription': 'operatordescription'
        }

        self._operatorreference = operatorreference
        self._operatorname = operatorname
        self._operatordescription = operatordescription

    @property
    def operatorreference(self):
        """
        Gets the operatorreference of this Operator.


        :return: The operatorreference of this Operator.
        :rtype: str
        """
        return self._operatorreference

    @operatorreference.setter
    def operatorreference(self, operatorreference):
        """
        Sets the operatorreference of this Operator.


        :param operatorreference: The operatorreference of this Operator.
        :type: str
        """

        self._operatorreference = operatorreference

    @property
    def operatorname(self):
        """
        Gets the operatorname of this Operator.


        :return: The operatorname of this Operator.
        :rtype: str
        """
        return self._operatorname

    @operatorname.setter
    def operatorname(self, operatorname):
        """
        Sets the operatorname of this Operator.


        :param operatorname: The operatorname of this Operator.
        :type: str
        """

        self._operatorname = operatorname

    @property
    def operatordescription(self):
        """
        Gets the operatordescription of this Operator.


        :return: The operatordescription of this Operator.
        :rtype: str
        """
        return self._operatordescription

    @operatordescription.setter
    def operatordescription(self, operatordescription):
        """
        Sets the operatordescription of this Operator.


        :param operatordescription: The operatordescription of this Operator.
        :type: str
        """

        self._operatordescription = operatordescription

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
