# coding: utf-8

"""
    RTPI REST Web Services API

    <p>RTPI REST Web Services API (<a href=\"https://goo.gl/s6NTJe\">RRWS API</a>) provides REST interface to retrieve information on real time bus information, timetables and bus stops. </p> <p>Each method available in RRWS API will be invoked using plain HTTP Request (GET method). Depending on parameters provided, result will be returned either in XML or JSON format (if format is not provided then JSON is used by default). Response will contain requested information (see method specification for details) and error status of the request.</p>  <h2>Error Codes</h2> <table> <tr><th>Error Code</th><th>Description</th></tr> <tr><td>0</td><td>Success</td></tr> <tr><td>1</td><td>No Results</td></tr> <tr><td>2</td><td>Missing Parameter</td></tr> <tr><td>3</td><td>Invalid Parameter</td></tr> <tr><td>4</td><td>Sceduled Downtime</td></tr> <tr><td>5</td><td>Unexpected System Error</td></tr> </table> <p>Error code is included in response for each message. For some error codes additional details will be provided in free text format (Error Message field).</p> 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Stop(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, stopid=None, displaystopid=None, shortname=None, shortnamelocalized=None, fullname=None, fullnamelocalized=None, latitude=None, longitude=None, operators=None):
        """
        Stop - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'stopid': 'str',
            'displaystopid': 'str',
            'shortname': 'str',
            'shortnamelocalized': 'str',
            'fullname': 'str',
            'fullnamelocalized': 'str',
            'latitude': 'str',
            'longitude': 'str',
            'operators': 'list[RouteOperator]'
        }

        self.attribute_map = {
            'stopid': 'stopid',
            'displaystopid': 'displaystopid',
            'shortname': 'shortname',
            'shortnamelocalized': 'shortnamelocalized',
            'fullname': 'fullname',
            'fullnamelocalized': 'fullnamelocalized',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'operators': 'operators'
        }

        self._stopid = stopid
        self._displaystopid = displaystopid
        self._shortname = shortname
        self._shortnamelocalized = shortnamelocalized
        self._fullname = fullname
        self._fullnamelocalized = fullnamelocalized
        self._latitude = latitude
        self._longitude = longitude
        self._operators = operators

    @property
    def stopid(self):
        """
        Gets the stopid of this Stop.


        :return: The stopid of this Stop.
        :rtype: str
        """
        return self._stopid

    @stopid.setter
    def stopid(self, stopid):
        """
        Sets the stopid of this Stop.


        :param stopid: The stopid of this Stop.
        :type: str
        """

        self._stopid = stopid

    @property
    def displaystopid(self):
        """
        Gets the displaystopid of this Stop.


        :return: The displaystopid of this Stop.
        :rtype: str
        """
        return self._displaystopid

    @displaystopid.setter
    def displaystopid(self, displaystopid):
        """
        Sets the displaystopid of this Stop.


        :param displaystopid: The displaystopid of this Stop.
        :type: str
        """

        self._displaystopid = displaystopid

    @property
    def shortname(self):
        """
        Gets the shortname of this Stop.


        :return: The shortname of this Stop.
        :rtype: str
        """
        return self._shortname

    @shortname.setter
    def shortname(self, shortname):
        """
        Sets the shortname of this Stop.


        :param shortname: The shortname of this Stop.
        :type: str
        """

        self._shortname = shortname

    @property
    def shortnamelocalized(self):
        """
        Gets the shortnamelocalized of this Stop.


        :return: The shortnamelocalized of this Stop.
        :rtype: str
        """
        return self._shortnamelocalized

    @shortnamelocalized.setter
    def shortnamelocalized(self, shortnamelocalized):
        """
        Sets the shortnamelocalized of this Stop.


        :param shortnamelocalized: The shortnamelocalized of this Stop.
        :type: str
        """

        self._shortnamelocalized = shortnamelocalized

    @property
    def fullname(self):
        """
        Gets the fullname of this Stop.


        :return: The fullname of this Stop.
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """
        Sets the fullname of this Stop.


        :param fullname: The fullname of this Stop.
        :type: str
        """

        self._fullname = fullname

    @property
    def fullnamelocalized(self):
        """
        Gets the fullnamelocalized of this Stop.


        :return: The fullnamelocalized of this Stop.
        :rtype: str
        """
        return self._fullnamelocalized

    @fullnamelocalized.setter
    def fullnamelocalized(self, fullnamelocalized):
        """
        Sets the fullnamelocalized of this Stop.


        :param fullnamelocalized: The fullnamelocalized of this Stop.
        :type: str
        """

        self._fullnamelocalized = fullnamelocalized

    @property
    def latitude(self):
        """
        Gets the latitude of this Stop.


        :return: The latitude of this Stop.
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """
        Sets the latitude of this Stop.


        :param latitude: The latitude of this Stop.
        :type: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """
        Gets the longitude of this Stop.


        :return: The longitude of this Stop.
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """
        Sets the longitude of this Stop.


        :param longitude: The longitude of this Stop.
        :type: str
        """

        self._longitude = longitude

    @property
    def operators(self):
        """
        Gets the operators of this Stop.


        :return: The operators of this Stop.
        :rtype: list[RouteOperator]
        """
        return self._operators

    @operators.setter
    def operators(self, operators):
        """
        Sets the operators of this Stop.


        :param operators: The operators of this Stop.
        :type: list[RouteOperator]
        """

        self._operators = operators

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
