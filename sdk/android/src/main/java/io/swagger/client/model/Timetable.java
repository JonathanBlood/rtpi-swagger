/**
 * RTPI REST Web Services API
 * <p>RTPI REST Web Services API (<a href=\"https://goo.gl/s6NTJe\">RRWS API</a>) provides REST interface to retrieve information on real time bus information, timetables and bus stops. </p> <p>Each method available in RRWS API will be invoked using plain HTTP Request (GET method). Depending on parameters provided, result will be returned either in XML or JSON format (if format is not provided then JSON is used by default). Response will contain requested information (see method specification for details) and error status of the request.</p>  <h2>Error Codes</h2> <table> <tr><th>Error Code</th><th>Description</th></tr> <tr><td>0</td><td>Success</td></tr> <tr><td>1</td><td>No Results</td></tr> <tr><td>2</td><td>Missing Parameter</td></tr> <tr><td>3</td><td>Invalid Parameter</td></tr> <tr><td>4</td><td>Sceduled Downtime</td></tr> <tr><td>5</td><td>Unexpected System Error</td></tr> </table> <p>Error code is included in response for each message. For some error codes additional details will be provided in free text format (Error Message field).</p> 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.model;

import java.util.*;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;


@ApiModel(description = "")
public class Timetable  {
  
  @SerializedName("startdayofweek")
  private String startdayofweek = null;
  @SerializedName("enddayofweek")
  private String enddayofweek = null;
  @SerializedName("destination")
  private String destination = null;
  @SerializedName("destinationlocalized")
  private String destinationlocalized = null;
  @SerializedName("lastupdated")
  private String lastupdated = null;
  @SerializedName("departures")
  private List<String> departures = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public String getStartdayofweek() {
    return startdayofweek;
  }
  public void setStartdayofweek(String startdayofweek) {
    this.startdayofweek = startdayofweek;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getEnddayofweek() {
    return enddayofweek;
  }
  public void setEnddayofweek(String enddayofweek) {
    this.enddayofweek = enddayofweek;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getDestination() {
    return destination;
  }
  public void setDestination(String destination) {
    this.destination = destination;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getDestinationlocalized() {
    return destinationlocalized;
  }
  public void setDestinationlocalized(String destinationlocalized) {
    this.destinationlocalized = destinationlocalized;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getLastupdated() {
    return lastupdated;
  }
  public void setLastupdated(String lastupdated) {
    this.lastupdated = lastupdated;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public List<String> getDepartures() {
    return departures;
  }
  public void setDepartures(List<String> departures) {
    this.departures = departures;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Timetable timetable = (Timetable) o;
    return (startdayofweek == null ? timetable.startdayofweek == null : startdayofweek.equals(timetable.startdayofweek)) &&
        (enddayofweek == null ? timetable.enddayofweek == null : enddayofweek.equals(timetable.enddayofweek)) &&
        (destination == null ? timetable.destination == null : destination.equals(timetable.destination)) &&
        (destinationlocalized == null ? timetable.destinationlocalized == null : destinationlocalized.equals(timetable.destinationlocalized)) &&
        (lastupdated == null ? timetable.lastupdated == null : lastupdated.equals(timetable.lastupdated)) &&
        (departures == null ? timetable.departures == null : departures.equals(timetable.departures));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (startdayofweek == null ? 0: startdayofweek.hashCode());
    result = 31 * result + (enddayofweek == null ? 0: enddayofweek.hashCode());
    result = 31 * result + (destination == null ? 0: destination.hashCode());
    result = 31 * result + (destinationlocalized == null ? 0: destinationlocalized.hashCode());
    result = 31 * result + (lastupdated == null ? 0: lastupdated.hashCode());
    result = 31 * result + (departures == null ? 0: departures.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Timetable {\n");
    
    sb.append("  startdayofweek: ").append(startdayofweek).append("\n");
    sb.append("  enddayofweek: ").append(enddayofweek).append("\n");
    sb.append("  destination: ").append(destination).append("\n");
    sb.append("  destinationlocalized: ").append(destinationlocalized).append("\n");
    sb.append("  lastupdated: ").append(lastupdated).append("\n");
    sb.append("  departures: ").append(departures).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
