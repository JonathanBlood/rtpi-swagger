/**
 * RTPI REST Web Services API
 * <p>RTPI REST Web Services API (<a href=\"https://goo.gl/s6NTJe\">RRWS API</a>) provides REST interface to retrieve information on real time bus information, timetables and bus stops. </p> <p>Each method available in RRWS API will be invoked using plain HTTP Request (GET method). Depending on parameters provided, result will be returned either in XML or JSON format (if format is not provided then JSON is used by default). Response will contain requested information (see method specification for details) and error status of the request.</p>  <h2>Error Codes</h2> <table> <tr><th>Error Code</th><th>Description</th></tr> <tr><td>0</td><td>Success</td></tr> <tr><td>1</td><td>No Results</td></tr> <tr><td>2</td><td>Missing Parameter</td></tr> <tr><td>3</td><td>Invalid Parameter</td></tr> <tr><td>4</td><td>Sceduled Downtime</td></tr> <tr><td>5</td><td>Unexpected System Error</td></tr> </table> <p>Error code is included in response for each message. For some error codes additional details will be provided in free text format (Error Message field).</p> 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * TimetableList.h
 * 
 * 
 */

#ifndef TimetableList_H_
#define TimetableList_H_


#include "ModelBase.h"

#include "Timetable.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  TimetableList
	: public ModelBase
{
public:
    TimetableList();
    virtual ~TimetableList();

	/////////////////////////////////////////////
	/// ModelBase overrides
	
    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;
    
 	/////////////////////////////////////////////
	/// TimetableList members
	   
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getErrorcode() const;
    void setErrorcode(utility::string_t value);
    bool errorcodeIsSet() const;
    void unsetErrorcode();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getErrormessage() const;
    void setErrormessage(utility::string_t value);
    bool errormessageIsSet() const;
    void unsetErrormessage();
    /// <summary>
    /// 
    /// </summary>
    int32_t getNumberofresults() const;
    void setNumberofresults(int32_t value);
    bool numberofresultsIsSet() const;
    void unsetNumberofresults();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRoute() const;
    void setRoute(utility::string_t value);
    bool routeIsSet() const;
    void unsetRoute();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStopid() const;
    void setStopid(utility::string_t value);
    bool stopidIsSet() const;
    void unsetStopid();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTimestamp() const;
    void setTimestamp(utility::string_t value);
    bool timestampIsSet() const;
    void unsetTimestamp();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Timetable>>& getResults();
    bool resultsIsSet() const;
    void unsetResults();
    
protected:
    utility::string_t m_Errorcode;
    bool m_ErrorcodeIsSet;
utility::string_t m_Errormessage;
    bool m_ErrormessageIsSet;
int32_t m_Numberofresults;
    bool m_NumberofresultsIsSet;
utility::string_t m_Route;
    bool m_RouteIsSet;
utility::string_t m_Stopid;
    bool m_StopidIsSet;
utility::string_t m_Timestamp;
    bool m_TimestampIsSet;
std::vector<std::shared_ptr<Timetable>> m_Results;
    bool m_ResultsIsSet;
};

}
}
}
}

#endif /* TimetableList_H_ */
