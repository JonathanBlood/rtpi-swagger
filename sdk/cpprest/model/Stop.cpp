/**
 * RTPI REST Web Services API
 * <p>RTPI REST Web Services API (<a href=\"https://goo.gl/s6NTJe\">RRWS API</a>) provides REST interface to retrieve information on real time bus information, timetables and bus stops. </p> <p>Each method available in RRWS API will be invoked using plain HTTP Request (GET method). Depending on parameters provided, result will be returned either in XML or JSON format (if format is not provided then JSON is used by default). Response will contain requested information (see method specification for details) and error status of the request.</p>  <h2>Error Codes</h2> <table> <tr><th>Error Code</th><th>Description</th></tr> <tr><td>0</td><td>Success</td></tr> <tr><td>1</td><td>No Results</td></tr> <tr><td>2</td><td>Missing Parameter</td></tr> <tr><td>3</td><td>Invalid Parameter</td></tr> <tr><td>4</td><td>Sceduled Downtime</td></tr> <tr><td>5</td><td>Unexpected System Error</td></tr> </table> <p>Error code is included in response for each message. For some error codes additional details will be provided in free text format (Error Message field).</p> 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "Stop.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Stop::Stop()
{
    m_Stopid = U("");
    m_StopidIsSet = false;
    m_Displaystopid = U("");
    m_DisplaystopidIsSet = false;
    m_Shortname = U("");
    m_ShortnameIsSet = false;
    m_Shortnamelocalized = U("");
    m_ShortnamelocalizedIsSet = false;
    m_Fullname = U("");
    m_FullnameIsSet = false;
    m_Fullnamelocalized = U("");
    m_FullnamelocalizedIsSet = false;
    m_Latitude = U("");
    m_LatitudeIsSet = false;
    m_Longitude = U("");
    m_LongitudeIsSet = false;
    m_OperatorsIsSet = false;
    
}

Stop::~Stop()
{
}

void Stop::validate() 
{
    // TODO: implement validation
}

web::json::value Stop::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_StopidIsSet)
    {
        val[U("stopid")] = ModelBase::toJson(m_Stopid);
    }
    if(m_DisplaystopidIsSet)
    {
        val[U("displaystopid")] = ModelBase::toJson(m_Displaystopid);
    }
    if(m_ShortnameIsSet)
    {
        val[U("shortname")] = ModelBase::toJson(m_Shortname);
    }
    if(m_ShortnamelocalizedIsSet)
    {
        val[U("shortnamelocalized")] = ModelBase::toJson(m_Shortnamelocalized);
    }
    if(m_FullnameIsSet)
    {
        val[U("fullname")] = ModelBase::toJson(m_Fullname);
    }
    if(m_FullnamelocalizedIsSet)
    {
        val[U("fullnamelocalized")] = ModelBase::toJson(m_Fullnamelocalized);
    }
    if(m_LatitudeIsSet)
    {
        val[U("latitude")] = ModelBase::toJson(m_Latitude);
    }
    if(m_LongitudeIsSet)
    {
        val[U("longitude")] = ModelBase::toJson(m_Longitude);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Operators )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0) 
        {
            val[U("operators")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void Stop::fromJson(web::json::value& val)
{
    if(val.has_field(U("stopid")))
    {
        setStopid(ModelBase::stringFromJson(val[U("stopid")]));
                
    }
    if(val.has_field(U("displaystopid")))
    {
        setDisplaystopid(ModelBase::stringFromJson(val[U("displaystopid")]));
                
    }
    if(val.has_field(U("shortname")))
    {
        setShortname(ModelBase::stringFromJson(val[U("shortname")]));
                
    }
    if(val.has_field(U("shortnamelocalized")))
    {
        setShortnamelocalized(ModelBase::stringFromJson(val[U("shortnamelocalized")]));
                
    }
    if(val.has_field(U("fullname")))
    {
        setFullname(ModelBase::stringFromJson(val[U("fullname")]));
                
    }
    if(val.has_field(U("fullnamelocalized")))
    {
        setFullnamelocalized(ModelBase::stringFromJson(val[U("fullnamelocalized")]));
                
    }
    if(val.has_field(U("latitude")))
    {
        setLatitude(ModelBase::stringFromJson(val[U("latitude")]));
                
    }
    if(val.has_field(U("longitude")))
    {
        setLongitude(ModelBase::stringFromJson(val[U("longitude")]));
                
    }
    {
        m_Operators.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("operators")))
        {
        for( auto& item : val[U("operators")].as_array() )
        {
            
            if(item.is_null()) 
            {
                m_Operators.push_back( std::shared_ptr<RouteOperator>(nullptr) );
            }
            else
            {
                std::shared_ptr<RouteOperator> newItem(new RouteOperator());
                newItem->fromJson(item);
                m_Operators.push_back( newItem );
            }
            
        }
        }
    }
    
}

void Stop::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_StopidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("stopid"), m_Stopid));
                
    }
    if(m_DisplaystopidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("displaystopid"), m_Displaystopid));
                
    }
    if(m_ShortnameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("shortname"), m_Shortname));
                
    }
    if(m_ShortnamelocalizedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("shortnamelocalized"), m_Shortnamelocalized));
                
    }
    if(m_FullnameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("fullname"), m_Fullname));
                
    }
    if(m_FullnamelocalizedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("fullnamelocalized"), m_Fullnamelocalized));
                
    }
    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("latitude"), m_Latitude));
                
    }
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("longitude"), m_Longitude));
                
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Operators )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0) 
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("operators"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void Stop::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("stopid")))
    {
        setStopid(ModelBase::stringFromHttpContent(multipart->getContent(U("stopid"))));
                
    }
    if(multipart->hasContent(U("displaystopid")))
    {
        setDisplaystopid(ModelBase::stringFromHttpContent(multipart->getContent(U("displaystopid"))));
                
    }
    if(multipart->hasContent(U("shortname")))
    {
        setShortname(ModelBase::stringFromHttpContent(multipart->getContent(U("shortname"))));
                
    }
    if(multipart->hasContent(U("shortnamelocalized")))
    {
        setShortnamelocalized(ModelBase::stringFromHttpContent(multipart->getContent(U("shortnamelocalized"))));
                
    }
    if(multipart->hasContent(U("fullname")))
    {
        setFullname(ModelBase::stringFromHttpContent(multipart->getContent(U("fullname"))));
                
    }
    if(multipart->hasContent(U("fullnamelocalized")))
    {
        setFullnamelocalized(ModelBase::stringFromHttpContent(multipart->getContent(U("fullnamelocalized"))));
                
    }
    if(multipart->hasContent(U("latitude")))
    {
        setLatitude(ModelBase::stringFromHttpContent(multipart->getContent(U("latitude"))));
                
    }
    if(multipart->hasContent(U("longitude")))
    {
        setLongitude(ModelBase::stringFromHttpContent(multipart->getContent(U("longitude"))));
                
    }
    {
        m_Operators.clear();
        if(multipart->hasContent(U("operators")))
        {            
        
        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("operators"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null()) 
            {
                m_Operators.push_back( std::shared_ptr<RouteOperator>(nullptr) );
            }
            else
            {
                std::shared_ptr<RouteOperator> newItem(new RouteOperator());
                newItem->fromJson(item);
                m_Operators.push_back( newItem );
            }
            
        }
        }
    }
    
}
    
   
utility::string_t Stop::getStopid() const
{
	return m_Stopid;
}
void Stop::setStopid(utility::string_t value)
{
	m_Stopid = value;
    m_StopidIsSet = true;
}
bool Stop::stopidIsSet() const
{
    return m_StopidIsSet;
}
void Stop::unsetStopid() 
{
    m_StopidIsSet = false;
}
utility::string_t Stop::getDisplaystopid() const
{
	return m_Displaystopid;
}
void Stop::setDisplaystopid(utility::string_t value)
{
	m_Displaystopid = value;
    m_DisplaystopidIsSet = true;
}
bool Stop::displaystopidIsSet() const
{
    return m_DisplaystopidIsSet;
}
void Stop::unsetDisplaystopid() 
{
    m_DisplaystopidIsSet = false;
}
utility::string_t Stop::getShortname() const
{
	return m_Shortname;
}
void Stop::setShortname(utility::string_t value)
{
	m_Shortname = value;
    m_ShortnameIsSet = true;
}
bool Stop::shortnameIsSet() const
{
    return m_ShortnameIsSet;
}
void Stop::unsetShortname() 
{
    m_ShortnameIsSet = false;
}
utility::string_t Stop::getShortnamelocalized() const
{
	return m_Shortnamelocalized;
}
void Stop::setShortnamelocalized(utility::string_t value)
{
	m_Shortnamelocalized = value;
    m_ShortnamelocalizedIsSet = true;
}
bool Stop::shortnamelocalizedIsSet() const
{
    return m_ShortnamelocalizedIsSet;
}
void Stop::unsetShortnamelocalized() 
{
    m_ShortnamelocalizedIsSet = false;
}
utility::string_t Stop::getFullname() const
{
	return m_Fullname;
}
void Stop::setFullname(utility::string_t value)
{
	m_Fullname = value;
    m_FullnameIsSet = true;
}
bool Stop::fullnameIsSet() const
{
    return m_FullnameIsSet;
}
void Stop::unsetFullname() 
{
    m_FullnameIsSet = false;
}
utility::string_t Stop::getFullnamelocalized() const
{
	return m_Fullnamelocalized;
}
void Stop::setFullnamelocalized(utility::string_t value)
{
	m_Fullnamelocalized = value;
    m_FullnamelocalizedIsSet = true;
}
bool Stop::fullnamelocalizedIsSet() const
{
    return m_FullnamelocalizedIsSet;
}
void Stop::unsetFullnamelocalized() 
{
    m_FullnamelocalizedIsSet = false;
}
utility::string_t Stop::getLatitude() const
{
	return m_Latitude;
}
void Stop::setLatitude(utility::string_t value)
{
	m_Latitude = value;
    m_LatitudeIsSet = true;
}
bool Stop::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}
void Stop::unsetLatitude() 
{
    m_LatitudeIsSet = false;
}
utility::string_t Stop::getLongitude() const
{
	return m_Longitude;
}
void Stop::setLongitude(utility::string_t value)
{
	m_Longitude = value;
    m_LongitudeIsSet = true;
}
bool Stop::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}
void Stop::unsetLongitude() 
{
    m_LongitudeIsSet = false;
}
std::vector<std::shared_ptr<RouteOperator>>& Stop::getOperators()
{
	return m_Operators;
}
bool Stop::operatorsIsSet() const
{
    return m_OperatorsIsSet;
}
void Stop::unsetOperators() 
{
    m_OperatorsIsSet = false;
}

}
}
}
}

