/**
 * RTPI REST Web Services API
 * <p>RTPI REST Web Services API (<a href=\"https://goo.gl/s6NTJe\">RRWS API</a>) provides REST interface to retrieve information on real time bus information, timetables and bus stops. </p> <p>Each method available in RRWS API will be invoked using plain HTTP Request (GET method). Depending on parameters provided, result will be returned either in XML or JSON format (if format is not provided then JSON is used by default). Response will contain requested information (see method specification for details) and error status of the request.</p>  <h2>Error Codes</h2> <table> <tr><th>Error Code</th><th>Description</th></tr> <tr><td>0</td><td>Success</td></tr> <tr><td>1</td><td>No Results</td></tr> <tr><td>2</td><td>Missing Parameter</td></tr> <tr><td>3</td><td>Invalid Parameter</td></tr> <tr><td>4</td><td>Sceduled Downtime</td></tr> <tr><td>5</td><td>Unexpected System Error</td></tr> </table> <p>Error code is included in response for each message. For some error codes additional details will be provided in free text format (Error Message field).</p> 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "RealTimeInformation.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

RealTimeInformation::RealTimeInformation()
{
    m_Arrivaldatetime = U("");
    m_ArrivaldatetimeIsSet = false;
    m_Duetime = U("");
    m_DuetimeIsSet = false;
    m_Departuredatetime = U("");
    m_DeparturedatetimeIsSet = false;
    m_Departureduetime = U("");
    m_DepartureduetimeIsSet = false;
    m_Scheduledarrivaldatetime = U("");
    m_ScheduledarrivaldatetimeIsSet = false;
    m_Scheduleddeparturedatetime = U("");
    m_ScheduleddeparturedatetimeIsSet = false;
    m_Destination = U("");
    m_DestinationIsSet = false;
    m_Destinationlocalized = U("");
    m_DestinationlocalizedIsSet = false;
    m_Origin = U("");
    m_OriginIsSet = false;
    m_Originlocalized = U("");
    m_OriginlocalizedIsSet = false;
    m_Direction = U("");
    m_DirectionIsSet = false;
    m_Operator = U("");
    m_OperatorIsSet = false;
    m_Additionalinformation = U("");
    m_AdditionalinformationIsSet = false;
    m_Lowfloorstatus = U("");
    m_LowfloorstatusIsSet = false;
    m_Route = U("");
    m_RouteIsSet = false;
    m_Sourcetimestamp = U("");
    m_SourcetimestampIsSet = false;
    m_Monitored = U("");
    m_MonitoredIsSet = false;
    
}

RealTimeInformation::~RealTimeInformation()
{
}

void RealTimeInformation::validate() 
{
    // TODO: implement validation
}

web::json::value RealTimeInformation::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_ArrivaldatetimeIsSet)
    {
        val[U("arrivaldatetime")] = ModelBase::toJson(m_Arrivaldatetime);
    }
    if(m_DuetimeIsSet)
    {
        val[U("duetime")] = ModelBase::toJson(m_Duetime);
    }
    if(m_DeparturedatetimeIsSet)
    {
        val[U("departuredatetime")] = ModelBase::toJson(m_Departuredatetime);
    }
    if(m_DepartureduetimeIsSet)
    {
        val[U("departureduetime")] = ModelBase::toJson(m_Departureduetime);
    }
    if(m_ScheduledarrivaldatetimeIsSet)
    {
        val[U("scheduledarrivaldatetime")] = ModelBase::toJson(m_Scheduledarrivaldatetime);
    }
    if(m_ScheduleddeparturedatetimeIsSet)
    {
        val[U("scheduleddeparturedatetime")] = ModelBase::toJson(m_Scheduleddeparturedatetime);
    }
    if(m_DestinationIsSet)
    {
        val[U("destination")] = ModelBase::toJson(m_Destination);
    }
    if(m_DestinationlocalizedIsSet)
    {
        val[U("destinationlocalized")] = ModelBase::toJson(m_Destinationlocalized);
    }
    if(m_OriginIsSet)
    {
        val[U("origin")] = ModelBase::toJson(m_Origin);
    }
    if(m_OriginlocalizedIsSet)
    {
        val[U("originlocalized")] = ModelBase::toJson(m_Originlocalized);
    }
    if(m_DirectionIsSet)
    {
        val[U("direction")] = ModelBase::toJson(m_Direction);
    }
    if(m_OperatorIsSet)
    {
        val[U("operator")] = ModelBase::toJson(m_Operator);
    }
    if(m_AdditionalinformationIsSet)
    {
        val[U("additionalinformation")] = ModelBase::toJson(m_Additionalinformation);
    }
    if(m_LowfloorstatusIsSet)
    {
        val[U("lowfloorstatus")] = ModelBase::toJson(m_Lowfloorstatus);
    }
    if(m_RouteIsSet)
    {
        val[U("route")] = ModelBase::toJson(m_Route);
    }
    if(m_SourcetimestampIsSet)
    {
        val[U("sourcetimestamp")] = ModelBase::toJson(m_Sourcetimestamp);
    }
    if(m_MonitoredIsSet)
    {
        val[U("monitored")] = ModelBase::toJson(m_Monitored);
    }
    

    return val;
}

void RealTimeInformation::fromJson(web::json::value& val)
{
    if(val.has_field(U("arrivaldatetime")))
    {
        setArrivaldatetime(ModelBase::stringFromJson(val[U("arrivaldatetime")]));
                
    }
    if(val.has_field(U("duetime")))
    {
        setDuetime(ModelBase::stringFromJson(val[U("duetime")]));
                
    }
    if(val.has_field(U("departuredatetime")))
    {
        setDeparturedatetime(ModelBase::stringFromJson(val[U("departuredatetime")]));
                
    }
    if(val.has_field(U("departureduetime")))
    {
        setDepartureduetime(ModelBase::stringFromJson(val[U("departureduetime")]));
                
    }
    if(val.has_field(U("scheduledarrivaldatetime")))
    {
        setScheduledarrivaldatetime(ModelBase::stringFromJson(val[U("scheduledarrivaldatetime")]));
                
    }
    if(val.has_field(U("scheduleddeparturedatetime")))
    {
        setScheduleddeparturedatetime(ModelBase::stringFromJson(val[U("scheduleddeparturedatetime")]));
                
    }
    if(val.has_field(U("destination")))
    {
        setDestination(ModelBase::stringFromJson(val[U("destination")]));
                
    }
    if(val.has_field(U("destinationlocalized")))
    {
        setDestinationlocalized(ModelBase::stringFromJson(val[U("destinationlocalized")]));
                
    }
    if(val.has_field(U("origin")))
    {
        setOrigin(ModelBase::stringFromJson(val[U("origin")]));
                
    }
    if(val.has_field(U("originlocalized")))
    {
        setOriginlocalized(ModelBase::stringFromJson(val[U("originlocalized")]));
                
    }
    if(val.has_field(U("direction")))
    {
        setDirection(ModelBase::stringFromJson(val[U("direction")]));
                
    }
    if(val.has_field(U("operator")))
    {
        setOperator(ModelBase::stringFromJson(val[U("operator")]));
                
    }
    if(val.has_field(U("additionalinformation")))
    {
        setAdditionalinformation(ModelBase::stringFromJson(val[U("additionalinformation")]));
                
    }
    if(val.has_field(U("lowfloorstatus")))
    {
        setLowfloorstatus(ModelBase::stringFromJson(val[U("lowfloorstatus")]));
                
    }
    if(val.has_field(U("route")))
    {
        setRoute(ModelBase::stringFromJson(val[U("route")]));
                
    }
    if(val.has_field(U("sourcetimestamp")))
    {
        setSourcetimestamp(ModelBase::stringFromJson(val[U("sourcetimestamp")]));
                
    }
    if(val.has_field(U("monitored")))
    {
        setMonitored(ModelBase::stringFromJson(val[U("monitored")]));
                
    }
    
}

void RealTimeInformation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_ArrivaldatetimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("arrivaldatetime"), m_Arrivaldatetime));
                
    }
    if(m_DuetimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("duetime"), m_Duetime));
                
    }
    if(m_DeparturedatetimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("departuredatetime"), m_Departuredatetime));
                
    }
    if(m_DepartureduetimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("departureduetime"), m_Departureduetime));
                
    }
    if(m_ScheduledarrivaldatetimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("scheduledarrivaldatetime"), m_Scheduledarrivaldatetime));
                
    }
    if(m_ScheduleddeparturedatetimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("scheduleddeparturedatetime"), m_Scheduleddeparturedatetime));
                
    }
    if(m_DestinationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("destination"), m_Destination));
                
    }
    if(m_DestinationlocalizedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("destinationlocalized"), m_Destinationlocalized));
                
    }
    if(m_OriginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("origin"), m_Origin));
                
    }
    if(m_OriginlocalizedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("originlocalized"), m_Originlocalized));
                
    }
    if(m_DirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("direction"), m_Direction));
                
    }
    if(m_OperatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("operator"), m_Operator));
                
    }
    if(m_AdditionalinformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("additionalinformation"), m_Additionalinformation));
                
    }
    if(m_LowfloorstatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lowfloorstatus"), m_Lowfloorstatus));
                
    }
    if(m_RouteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("route"), m_Route));
                
    }
    if(m_SourcetimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sourcetimestamp"), m_Sourcetimestamp));
                
    }
    if(m_MonitoredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("monitored"), m_Monitored));
                
    }
    
}

void RealTimeInformation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("arrivaldatetime")))
    {
        setArrivaldatetime(ModelBase::stringFromHttpContent(multipart->getContent(U("arrivaldatetime"))));
                
    }
    if(multipart->hasContent(U("duetime")))
    {
        setDuetime(ModelBase::stringFromHttpContent(multipart->getContent(U("duetime"))));
                
    }
    if(multipart->hasContent(U("departuredatetime")))
    {
        setDeparturedatetime(ModelBase::stringFromHttpContent(multipart->getContent(U("departuredatetime"))));
                
    }
    if(multipart->hasContent(U("departureduetime")))
    {
        setDepartureduetime(ModelBase::stringFromHttpContent(multipart->getContent(U("departureduetime"))));
                
    }
    if(multipart->hasContent(U("scheduledarrivaldatetime")))
    {
        setScheduledarrivaldatetime(ModelBase::stringFromHttpContent(multipart->getContent(U("scheduledarrivaldatetime"))));
                
    }
    if(multipart->hasContent(U("scheduleddeparturedatetime")))
    {
        setScheduleddeparturedatetime(ModelBase::stringFromHttpContent(multipart->getContent(U("scheduleddeparturedatetime"))));
                
    }
    if(multipart->hasContent(U("destination")))
    {
        setDestination(ModelBase::stringFromHttpContent(multipart->getContent(U("destination"))));
                
    }
    if(multipart->hasContent(U("destinationlocalized")))
    {
        setDestinationlocalized(ModelBase::stringFromHttpContent(multipart->getContent(U("destinationlocalized"))));
                
    }
    if(multipart->hasContent(U("origin")))
    {
        setOrigin(ModelBase::stringFromHttpContent(multipart->getContent(U("origin"))));
                
    }
    if(multipart->hasContent(U("originlocalized")))
    {
        setOriginlocalized(ModelBase::stringFromHttpContent(multipart->getContent(U("originlocalized"))));
                
    }
    if(multipart->hasContent(U("direction")))
    {
        setDirection(ModelBase::stringFromHttpContent(multipart->getContent(U("direction"))));
                
    }
    if(multipart->hasContent(U("operator")))
    {
        setOperator(ModelBase::stringFromHttpContent(multipart->getContent(U("operator"))));
                
    }
    if(multipart->hasContent(U("additionalinformation")))
    {
        setAdditionalinformation(ModelBase::stringFromHttpContent(multipart->getContent(U("additionalinformation"))));
                
    }
    if(multipart->hasContent(U("lowfloorstatus")))
    {
        setLowfloorstatus(ModelBase::stringFromHttpContent(multipart->getContent(U("lowfloorstatus"))));
                
    }
    if(multipart->hasContent(U("route")))
    {
        setRoute(ModelBase::stringFromHttpContent(multipart->getContent(U("route"))));
                
    }
    if(multipart->hasContent(U("sourcetimestamp")))
    {
        setSourcetimestamp(ModelBase::stringFromHttpContent(multipart->getContent(U("sourcetimestamp"))));
                
    }
    if(multipart->hasContent(U("monitored")))
    {
        setMonitored(ModelBase::stringFromHttpContent(multipart->getContent(U("monitored"))));
                
    }
    
}
    
   
utility::string_t RealTimeInformation::getArrivaldatetime() const
{
	return m_Arrivaldatetime;
}
void RealTimeInformation::setArrivaldatetime(utility::string_t value)
{
	m_Arrivaldatetime = value;
    m_ArrivaldatetimeIsSet = true;
}
bool RealTimeInformation::arrivaldatetimeIsSet() const
{
    return m_ArrivaldatetimeIsSet;
}
void RealTimeInformation::unsetArrivaldatetime() 
{
    m_ArrivaldatetimeIsSet = false;
}
utility::string_t RealTimeInformation::getDuetime() const
{
	return m_Duetime;
}
void RealTimeInformation::setDuetime(utility::string_t value)
{
	m_Duetime = value;
    m_DuetimeIsSet = true;
}
bool RealTimeInformation::duetimeIsSet() const
{
    return m_DuetimeIsSet;
}
void RealTimeInformation::unsetDuetime() 
{
    m_DuetimeIsSet = false;
}
utility::string_t RealTimeInformation::getDeparturedatetime() const
{
	return m_Departuredatetime;
}
void RealTimeInformation::setDeparturedatetime(utility::string_t value)
{
	m_Departuredatetime = value;
    m_DeparturedatetimeIsSet = true;
}
bool RealTimeInformation::departuredatetimeIsSet() const
{
    return m_DeparturedatetimeIsSet;
}
void RealTimeInformation::unsetDeparturedatetime() 
{
    m_DeparturedatetimeIsSet = false;
}
utility::string_t RealTimeInformation::getDepartureduetime() const
{
	return m_Departureduetime;
}
void RealTimeInformation::setDepartureduetime(utility::string_t value)
{
	m_Departureduetime = value;
    m_DepartureduetimeIsSet = true;
}
bool RealTimeInformation::departureduetimeIsSet() const
{
    return m_DepartureduetimeIsSet;
}
void RealTimeInformation::unsetDepartureduetime() 
{
    m_DepartureduetimeIsSet = false;
}
utility::string_t RealTimeInformation::getScheduledarrivaldatetime() const
{
	return m_Scheduledarrivaldatetime;
}
void RealTimeInformation::setScheduledarrivaldatetime(utility::string_t value)
{
	m_Scheduledarrivaldatetime = value;
    m_ScheduledarrivaldatetimeIsSet = true;
}
bool RealTimeInformation::scheduledarrivaldatetimeIsSet() const
{
    return m_ScheduledarrivaldatetimeIsSet;
}
void RealTimeInformation::unsetScheduledarrivaldatetime() 
{
    m_ScheduledarrivaldatetimeIsSet = false;
}
utility::string_t RealTimeInformation::getScheduleddeparturedatetime() const
{
	return m_Scheduleddeparturedatetime;
}
void RealTimeInformation::setScheduleddeparturedatetime(utility::string_t value)
{
	m_Scheduleddeparturedatetime = value;
    m_ScheduleddeparturedatetimeIsSet = true;
}
bool RealTimeInformation::scheduleddeparturedatetimeIsSet() const
{
    return m_ScheduleddeparturedatetimeIsSet;
}
void RealTimeInformation::unsetScheduleddeparturedatetime() 
{
    m_ScheduleddeparturedatetimeIsSet = false;
}
utility::string_t RealTimeInformation::getDestination() const
{
	return m_Destination;
}
void RealTimeInformation::setDestination(utility::string_t value)
{
	m_Destination = value;
    m_DestinationIsSet = true;
}
bool RealTimeInformation::destinationIsSet() const
{
    return m_DestinationIsSet;
}
void RealTimeInformation::unsetDestination() 
{
    m_DestinationIsSet = false;
}
utility::string_t RealTimeInformation::getDestinationlocalized() const
{
	return m_Destinationlocalized;
}
void RealTimeInformation::setDestinationlocalized(utility::string_t value)
{
	m_Destinationlocalized = value;
    m_DestinationlocalizedIsSet = true;
}
bool RealTimeInformation::destinationlocalizedIsSet() const
{
    return m_DestinationlocalizedIsSet;
}
void RealTimeInformation::unsetDestinationlocalized() 
{
    m_DestinationlocalizedIsSet = false;
}
utility::string_t RealTimeInformation::getOrigin() const
{
	return m_Origin;
}
void RealTimeInformation::setOrigin(utility::string_t value)
{
	m_Origin = value;
    m_OriginIsSet = true;
}
bool RealTimeInformation::originIsSet() const
{
    return m_OriginIsSet;
}
void RealTimeInformation::unsetOrigin() 
{
    m_OriginIsSet = false;
}
utility::string_t RealTimeInformation::getOriginlocalized() const
{
	return m_Originlocalized;
}
void RealTimeInformation::setOriginlocalized(utility::string_t value)
{
	m_Originlocalized = value;
    m_OriginlocalizedIsSet = true;
}
bool RealTimeInformation::originlocalizedIsSet() const
{
    return m_OriginlocalizedIsSet;
}
void RealTimeInformation::unsetOriginlocalized() 
{
    m_OriginlocalizedIsSet = false;
}
utility::string_t RealTimeInformation::getDirection() const
{
	return m_Direction;
}
void RealTimeInformation::setDirection(utility::string_t value)
{
	m_Direction = value;
    m_DirectionIsSet = true;
}
bool RealTimeInformation::directionIsSet() const
{
    return m_DirectionIsSet;
}
void RealTimeInformation::unsetDirection() 
{
    m_DirectionIsSet = false;
}
utility::string_t RealTimeInformation::getOperator() const
{
	return m_Operator;
}
void RealTimeInformation::setOperator(utility::string_t value)
{
	m_Operator = value;
    m_OperatorIsSet = true;
}
bool RealTimeInformation::operatorIsSet() const
{
    return m_OperatorIsSet;
}
void RealTimeInformation::unsetOperator() 
{
    m_OperatorIsSet = false;
}
utility::string_t RealTimeInformation::getAdditionalinformation() const
{
	return m_Additionalinformation;
}
void RealTimeInformation::setAdditionalinformation(utility::string_t value)
{
	m_Additionalinformation = value;
    m_AdditionalinformationIsSet = true;
}
bool RealTimeInformation::additionalinformationIsSet() const
{
    return m_AdditionalinformationIsSet;
}
void RealTimeInformation::unsetAdditionalinformation() 
{
    m_AdditionalinformationIsSet = false;
}
utility::string_t RealTimeInformation::getLowfloorstatus() const
{
	return m_Lowfloorstatus;
}
void RealTimeInformation::setLowfloorstatus(utility::string_t value)
{
	m_Lowfloorstatus = value;
    m_LowfloorstatusIsSet = true;
}
bool RealTimeInformation::lowfloorstatusIsSet() const
{
    return m_LowfloorstatusIsSet;
}
void RealTimeInformation::unsetLowfloorstatus() 
{
    m_LowfloorstatusIsSet = false;
}
utility::string_t RealTimeInformation::getRoute() const
{
	return m_Route;
}
void RealTimeInformation::setRoute(utility::string_t value)
{
	m_Route = value;
    m_RouteIsSet = true;
}
bool RealTimeInformation::routeIsSet() const
{
    return m_RouteIsSet;
}
void RealTimeInformation::unsetRoute() 
{
    m_RouteIsSet = false;
}
utility::string_t RealTimeInformation::getSourcetimestamp() const
{
	return m_Sourcetimestamp;
}
void RealTimeInformation::setSourcetimestamp(utility::string_t value)
{
	m_Sourcetimestamp = value;
    m_SourcetimestampIsSet = true;
}
bool RealTimeInformation::sourcetimestampIsSet() const
{
    return m_SourcetimestampIsSet;
}
void RealTimeInformation::unsetSourcetimestamp() 
{
    m_SourcetimestampIsSet = false;
}
utility::string_t RealTimeInformation::getMonitored() const
{
	return m_Monitored;
}
void RealTimeInformation::setMonitored(utility::string_t value)
{
	m_Monitored = value;
    m_MonitoredIsSet = true;
}
bool RealTimeInformation::monitoredIsSet() const
{
    return m_MonitoredIsSet;
}
void RealTimeInformation::unsetMonitored() 
{
    m_MonitoredIsSet = false;
}

}
}
}
}

