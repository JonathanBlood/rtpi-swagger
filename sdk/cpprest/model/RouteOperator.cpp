/**
 * RTPI REST Web Services API
 * <p>RTPI REST Web Services API (<a href=\"https://goo.gl/s6NTJe\">RRWS API</a>) provides REST interface to retrieve information on real time bus information, timetables and bus stops. </p> <p>Each method available in RRWS API will be invoked using plain HTTP Request (GET method). Depending on parameters provided, result will be returned either in XML or JSON format (if format is not provided then JSON is used by default). Response will contain requested information (see method specification for details) and error status of the request.</p>  <h2>Error Codes</h2> <table> <tr><th>Error Code</th><th>Description</th></tr> <tr><td>0</td><td>Success</td></tr> <tr><td>1</td><td>No Results</td></tr> <tr><td>2</td><td>Missing Parameter</td></tr> <tr><td>3</td><td>Invalid Parameter</td></tr> <tr><td>4</td><td>Sceduled Downtime</td></tr> <tr><td>5</td><td>Unexpected System Error</td></tr> </table> <p>Error code is included in response for each message. For some error codes additional details will be provided in free text format (Error Message field).</p> 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "RouteOperator.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

RouteOperator::RouteOperator()
{
    m_Name = U("");
    m_NameIsSet = false;
    m_RoutesIsSet = false;
    
}

RouteOperator::~RouteOperator()
{
}

void RouteOperator::validate() 
{
    // TODO: implement validation
}

web::json::value RouteOperator::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Routes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0) 
        {
            val[U("routes")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void RouteOperator::fromJson(web::json::value& val)
{
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
                
    }
    {
        m_Routes.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("routes")))
        {
        for( auto& item : val[U("routes")].as_array() )
        {
            m_Routes.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    
}

void RouteOperator::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
                
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Routes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0) 
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("routes"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void RouteOperator::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
                
    }
    {
        m_Routes.clear();
        if(multipart->hasContent(U("routes")))
        {            
        
        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("routes"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Routes.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    
}
    
   
utility::string_t RouteOperator::getName() const
{
	return m_Name;
}
void RouteOperator::setName(utility::string_t value)
{
	m_Name = value;
    m_NameIsSet = true;
}
bool RouteOperator::nameIsSet() const
{
    return m_NameIsSet;
}
void RouteOperator::unsetName() 
{
    m_NameIsSet = false;
}
std::vector<utility::string_t>& RouteOperator::getRoutes()
{
	return m_Routes;
}
bool RouteOperator::routesIsSet() const
{
    return m_RoutesIsSet;
}
void RouteOperator::unsetRoutes() 
{
    m_RoutesIsSet = false;
}

}
}
}
}

