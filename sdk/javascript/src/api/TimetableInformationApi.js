/**
 * RTPI REST Web Services API
 * <p>RTPI REST Web Services API (<a href=\"https://goo.gl/s6NTJe\">RRWS API</a>) provides REST interface to retrieve information on real time bus information, timetables and bus stops. </p> <p>Each method available in RRWS API will be invoked using plain HTTP Request (GET method). Depending on parameters provided, result will be returned either in XML or JSON format (if format is not provided then JSON is used by default). Response will contain requested information (see method specification for details) and error status of the request.</p>  <h2>Error Codes</h2> <table> <tr><th>Error Code</th><th>Description</th></tr> <tr><td>0</td><td>Success</td></tr> <tr><td>1</td><td>No Results</td></tr> <tr><td>2</td><td>Missing Parameter</td></tr> <tr><td>3</td><td>Invalid Parameter</td></tr> <tr><td>4</td><td>Sceduled Downtime</td></tr> <tr><td>5</td><td>Unexpected System Error</td></tr> </table> <p>Error code is included in response for each message. For some error codes additional details will be provided in free text format (Error Message field).</p> 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/TimetableList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/TimetableList'));
  } else {
    // Browser globals (root is window)
    if (!root.RtpiRestWebServicesApi) {
      root.RtpiRestWebServicesApi = {};
    }
    root.RtpiRestWebServicesApi.TimetableInformationApi = factory(root.RtpiRestWebServicesApi.ApiClient, root.RtpiRestWebServicesApi.TimetableList);
  }
}(this, function(ApiClient, TimetableList) {
  'use strict';

  /**
   * TimetableInformation service.
   * @module api/TimetableInformationApi
   * @version 1.0.0
   */

  /**
   * Constructs a new TimetableInformationApi. 
   * @alias module:api/TimetableInformationApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getTimeTable operation.
     * @callback module:api/TimetableInformationApi~getTimeTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimetableList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Endpoint to retrieve timetable information
     * @param {module:model/String} type value: week; Time table information is retrieved for the whole week
     * @param {String} stopid The bus stop id, if not provided all bus stops are returned
     * @param {String} routeid The route identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format If not provided JSON format will be used by default
     * @param {module:api/TimetableInformationApi~getTimeTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimetableList}
     */
    this.getTimeTable = function(type, stopid, routeid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling getTimeTable";
      }

      // verify the required parameter 'stopid' is set
      if (stopid == undefined || stopid == null) {
        throw "Missing the required parameter 'stopid' when calling getTimeTable";
      }

      // verify the required parameter 'routeid' is set
      if (routeid == undefined || routeid == null) {
        throw "Missing the required parameter 'routeid' when calling getTimeTable";
      }


      var pathParams = {
      };
      var queryParams = {
        'format': opts['format'],
        'type': type,
        'stopid': stopid,
        'routeid': routeid
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = TimetableList;

      return this.apiClient.callApi(
        '/timetableinformation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
