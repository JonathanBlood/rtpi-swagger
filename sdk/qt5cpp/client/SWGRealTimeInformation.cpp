/**
 * RTPI REST Web Services API
 * <p>RTPI REST Web Services API (<a href=\"https://goo.gl/s6NTJe\">RRWS API</a>) provides REST interface to retrieve information on real time bus information, timetables and bus stops. </p> <p>Each method available in RRWS API will be invoked using plain HTTP Request (GET method). Depending on parameters provided, result will be returned either in XML or JSON format (if format is not provided then JSON is used by default). Response will contain requested information (see method specification for details) and error status of the request.</p>  <h2>Error Codes</h2> <table> <tr><th>Error Code</th><th>Description</th></tr> <tr><td>0</td><td>Success</td></tr> <tr><td>1</td><td>No Results</td></tr> <tr><td>2</td><td>Missing Parameter</td></tr> <tr><td>3</td><td>Invalid Parameter</td></tr> <tr><td>4</td><td>Sceduled Downtime</td></tr> <tr><td>5</td><td>Unexpected System Error</td></tr> </table> <p>Error code is included in response for each message. For some error codes additional details will be provided in free text format (Error Message field).</p> 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGRealTimeInformation.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGRealTimeInformation::SWGRealTimeInformation(QString* json) {
    init();
    this->fromJson(*json);
}

SWGRealTimeInformation::SWGRealTimeInformation() {
    init();
}

SWGRealTimeInformation::~SWGRealTimeInformation() {
    this->cleanup();
}

void
SWGRealTimeInformation::init() {
    arrivaldatetime = new QString("");
duetime = new QString("");
departuredatetime = new QString("");
departureduetime = new QString("");
scheduledarrivaldatetime = new QString("");
scheduleddeparturedatetime = new QString("");
destination = new QString("");
destinationlocalized = new QString("");
origin = new QString("");
originlocalized = new QString("");
direction = new QString("");
operator = new QString("");
additionalinformation = new QString("");
lowfloorstatus = new QString("");
route = new QString("");
sourcetimestamp = new QString("");
monitored = new QString("");
}

void
SWGRealTimeInformation::cleanup() {
    if(arrivaldatetime != NULL) {
        delete arrivaldatetime;
    }
if(duetime != NULL) {
        delete duetime;
    }
if(departuredatetime != NULL) {
        delete departuredatetime;
    }
if(departureduetime != NULL) {
        delete departureduetime;
    }
if(scheduledarrivaldatetime != NULL) {
        delete scheduledarrivaldatetime;
    }
if(scheduleddeparturedatetime != NULL) {
        delete scheduleddeparturedatetime;
    }
if(destination != NULL) {
        delete destination;
    }
if(destinationlocalized != NULL) {
        delete destinationlocalized;
    }
if(origin != NULL) {
        delete origin;
    }
if(originlocalized != NULL) {
        delete originlocalized;
    }
if(direction != NULL) {
        delete direction;
    }
if(operator != NULL) {
        delete operator;
    }
if(additionalinformation != NULL) {
        delete additionalinformation;
    }
if(lowfloorstatus != NULL) {
        delete lowfloorstatus;
    }
if(route != NULL) {
        delete route;
    }
if(sourcetimestamp != NULL) {
        delete sourcetimestamp;
    }
if(monitored != NULL) {
        delete monitored;
    }
}

SWGRealTimeInformation*
SWGRealTimeInformation::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGRealTimeInformation::fromJsonObject(QJsonObject &pJson) {
    setValue(&arrivaldatetime, pJson["arrivaldatetime"], "QString", "QString");
setValue(&duetime, pJson["duetime"], "QString", "QString");
setValue(&departuredatetime, pJson["departuredatetime"], "QString", "QString");
setValue(&departureduetime, pJson["departureduetime"], "QString", "QString");
setValue(&scheduledarrivaldatetime, pJson["scheduledarrivaldatetime"], "QString", "QString");
setValue(&scheduleddeparturedatetime, pJson["scheduleddeparturedatetime"], "QString", "QString");
setValue(&destination, pJson["destination"], "QString", "QString");
setValue(&destinationlocalized, pJson["destinationlocalized"], "QString", "QString");
setValue(&origin, pJson["origin"], "QString", "QString");
setValue(&originlocalized, pJson["originlocalized"], "QString", "QString");
setValue(&direction, pJson["direction"], "QString", "QString");
setValue(&operator, pJson["operator"], "QString", "QString");
setValue(&additionalinformation, pJson["additionalinformation"], "QString", "QString");
setValue(&lowfloorstatus, pJson["lowfloorstatus"], "QString", "QString");
setValue(&route, pJson["route"], "QString", "QString");
setValue(&sourcetimestamp, pJson["sourcetimestamp"], "QString", "QString");
setValue(&monitored, pJson["monitored"], "QString", "QString");
}

QString
SWGRealTimeInformation::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGRealTimeInformation::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("arrivaldatetime"), arrivaldatetime, obj, QString("QString"));
    
        

    
    toJsonValue(QString("duetime"), duetime, obj, QString("QString"));
    
        

    
    toJsonValue(QString("departuredatetime"), departuredatetime, obj, QString("QString"));
    
        

    
    toJsonValue(QString("departureduetime"), departureduetime, obj, QString("QString"));
    
        

    
    toJsonValue(QString("scheduledarrivaldatetime"), scheduledarrivaldatetime, obj, QString("QString"));
    
        

    
    toJsonValue(QString("scheduleddeparturedatetime"), scheduleddeparturedatetime, obj, QString("QString"));
    
        

    
    toJsonValue(QString("destination"), destination, obj, QString("QString"));
    
        

    
    toJsonValue(QString("destinationlocalized"), destinationlocalized, obj, QString("QString"));
    
        

    
    toJsonValue(QString("origin"), origin, obj, QString("QString"));
    
        

    
    toJsonValue(QString("originlocalized"), originlocalized, obj, QString("QString"));
    
        

    
    toJsonValue(QString("direction"), direction, obj, QString("QString"));
    
        

    
    toJsonValue(QString("operator"), operator, obj, QString("QString"));
    
        

    
    toJsonValue(QString("additionalinformation"), additionalinformation, obj, QString("QString"));
    
        

    
    toJsonValue(QString("lowfloorstatus"), lowfloorstatus, obj, QString("QString"));
    
        

    
    toJsonValue(QString("route"), route, obj, QString("QString"));
    
        

    
    toJsonValue(QString("sourcetimestamp"), sourcetimestamp, obj, QString("QString"));
    
        

    
    toJsonValue(QString("monitored"), monitored, obj, QString("QString"));
    
        

    return obj;
}

QString*
SWGRealTimeInformation::getArrivaldatetime() {
    return arrivaldatetime;
}
void
SWGRealTimeInformation::setArrivaldatetime(QString* arrivaldatetime) {
    this->arrivaldatetime = arrivaldatetime;
}

QString*
SWGRealTimeInformation::getDuetime() {
    return duetime;
}
void
SWGRealTimeInformation::setDuetime(QString* duetime) {
    this->duetime = duetime;
}

QString*
SWGRealTimeInformation::getDeparturedatetime() {
    return departuredatetime;
}
void
SWGRealTimeInformation::setDeparturedatetime(QString* departuredatetime) {
    this->departuredatetime = departuredatetime;
}

QString*
SWGRealTimeInformation::getDepartureduetime() {
    return departureduetime;
}
void
SWGRealTimeInformation::setDepartureduetime(QString* departureduetime) {
    this->departureduetime = departureduetime;
}

QString*
SWGRealTimeInformation::getScheduledarrivaldatetime() {
    return scheduledarrivaldatetime;
}
void
SWGRealTimeInformation::setScheduledarrivaldatetime(QString* scheduledarrivaldatetime) {
    this->scheduledarrivaldatetime = scheduledarrivaldatetime;
}

QString*
SWGRealTimeInformation::getScheduleddeparturedatetime() {
    return scheduleddeparturedatetime;
}
void
SWGRealTimeInformation::setScheduleddeparturedatetime(QString* scheduleddeparturedatetime) {
    this->scheduleddeparturedatetime = scheduleddeparturedatetime;
}

QString*
SWGRealTimeInformation::getDestination() {
    return destination;
}
void
SWGRealTimeInformation::setDestination(QString* destination) {
    this->destination = destination;
}

QString*
SWGRealTimeInformation::getDestinationlocalized() {
    return destinationlocalized;
}
void
SWGRealTimeInformation::setDestinationlocalized(QString* destinationlocalized) {
    this->destinationlocalized = destinationlocalized;
}

QString*
SWGRealTimeInformation::getOrigin() {
    return origin;
}
void
SWGRealTimeInformation::setOrigin(QString* origin) {
    this->origin = origin;
}

QString*
SWGRealTimeInformation::getOriginlocalized() {
    return originlocalized;
}
void
SWGRealTimeInformation::setOriginlocalized(QString* originlocalized) {
    this->originlocalized = originlocalized;
}

QString*
SWGRealTimeInformation::getDirection() {
    return direction;
}
void
SWGRealTimeInformation::setDirection(QString* direction) {
    this->direction = direction;
}

QString*
SWGRealTimeInformation::getOperator() {
    return operator;
}
void
SWGRealTimeInformation::setOperator(QString* operator) {
    this->operator = operator;
}

QString*
SWGRealTimeInformation::getAdditionalinformation() {
    return additionalinformation;
}
void
SWGRealTimeInformation::setAdditionalinformation(QString* additionalinformation) {
    this->additionalinformation = additionalinformation;
}

QString*
SWGRealTimeInformation::getLowfloorstatus() {
    return lowfloorstatus;
}
void
SWGRealTimeInformation::setLowfloorstatus(QString* lowfloorstatus) {
    this->lowfloorstatus = lowfloorstatus;
}

QString*
SWGRealTimeInformation::getRoute() {
    return route;
}
void
SWGRealTimeInformation::setRoute(QString* route) {
    this->route = route;
}

QString*
SWGRealTimeInformation::getSourcetimestamp() {
    return sourcetimestamp;
}
void
SWGRealTimeInformation::setSourcetimestamp(QString* sourcetimestamp) {
    this->sourcetimestamp = sourcetimestamp;
}

QString*
SWGRealTimeInformation::getMonitored() {
    return monitored;
}
void
SWGRealTimeInformation::setMonitored(QString* monitored) {
    this->monitored = monitored;
}



} /* namespace Swagger */

